name: '[RELEASE] Nethermind'

on: 
  workflow_dispatch:
    inputs:
      tag:
        description: 'The TAG of the version you want to release'
        required: true

permissions:
  deployments: write
  packages: write
  contents: write

jobs:
  build-nethermind:
    name: Building Nethermind Packages
    runs-on: ubuntu-latest
    env:      
      RELEASE_DIRECTORY: /home/runner/work/nethermind/nethermind
      LIN_RELEASE: nethermind-lin-x64
      OSX_RELEASE: nethermind-osx-x64
      WIN_RELEASE: nethermind-win-x64
      LIN_ARM64_RELEASE: nethermind-lin-arm64
      OSX_ARM64_RELEASE: nethermind-osx-arm64
      LINUX: linux-x64
      OSX: osx-x64
      WIN10: win10-x64
      LINUX_ARM64: linux-arm64
      OSX_ARM64: osx-arm64
    outputs:
      COMMIT_HASH: ${{ steps.build-runner.outputs.COMMIT_HASH }}
      BUILD_TIMESTAMP: ${{ steps.build-runner.outputs.BUILD_TIMESTAMP }}
    steps:
    - name: Checking out Nethermind repository
      uses: actions/checkout@v3
      with:
        submodules: recursive
        path: nethermind
        ref: ${{ github.event.inputs.tag }}
    - name: Checking out Nethermind Launcher repository
      uses: actions/checkout@v3
      with:
        repository: NethermindEth/nethermind.launcher
        path: launcher
    - name: Setting up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: "14"
    - name: Setting up Build Environment
      run: |
        npm i pkg @vercel/ncc -g
    - name: Setting up .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
    - name: Setting up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Setting up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2
    - name: Setting up Packages
      run: ./nethermind/scripts/deployment/setup-packages.sh
    - name: Building Runner
      id: build-runner
      run: |
        cd nethermind/
        build_timestamp=$(date '+%s')
        commit_hash=$(git describe --always --exclude=* --abbrev=40)
        echo "::set-output name=BUILD_TIMESTAMP::$build_timestamp"
        echo "::set-output name=COMMIT_HASH::$commit_hash"
        ./scripts/deployment/build-runner.sh ${{ github.event.inputs.tag }} $commit_hash $build_timestamp
    - name: Building Cli
      run: ./nethermind/scripts/deployment/build-cli.sh
    - name: Building Launcher
      run: ./nethermind/scripts/deployment/build-launcher.sh
    - name: Building Launcher for arm64
      run: |
        cd nethermind/
        docker buildx build --platform=linux/arm64 -t tmp-launcher -f Dockerfile.launcher . --load
        docker run --platform=linux/arm64 -v $PWD:/opt/mount --rm tmp-launcher bash -c "cp /nethermind/Nethermind.Launcher /opt/mount/"
        mv Nethermind.Launcher ${{ env.RELEASE_DIRECTORY }}/${{ env.LIN_ARM64_RELEASE }}/Nethermind.Launcher
    - name: Archiving packages
      run: ./nethermind/scripts/deployment/archive-packages.sh ${{ github.event.inputs.tag }} ${{ steps.build-runner.outputs.COMMIT_HASH }} ${{ steps.build-runner.outputs.BUILD_TIMESTAMP}}
    - uses: actions/upload-artifact@v3
      name: Uploading Nethermind darwin package
      with:
        name: nethermind-darwin-package
        path: ${{ env.RELEASE_DIRECTORY }}/${{ env.OSX_RELEASE }}/nethermind-darwin-amd64-*
    - uses: actions/upload-artifact@v3
      name: Uploading Nethermind linux package
      with:
        name: nethermind-linux-package
        path: ${{ env.RELEASE_DIRECTORY }}/${{ env.LIN_RELEASE }}/nethermind-linux-amd64-*
    - uses: actions/upload-artifact@v3
      name: Uploading Nethermind windows package
      with:
        name: nethermind-windows-package
        path: ${{ env.RELEASE_DIRECTORY }}/${{ env.WIN_RELEASE }}/nethermind-windows-amd64-*
    - uses: actions/upload-artifact@v3
      name: Uploading Nethermind linux arm64 package
      with:
        name: nethermind-linux-arm64-package
        path: ${{ env.RELEASE_DIRECTORY }}/${{ env.LIN_ARM64_RELEASE }}/nethermind-linux-arm64-*
    - uses: actions/upload-artifact@v3
      name: Uploading Nethermind darwin arm64 package
      with:
        name: nethermind-darwin-arm64-package
        path: ${{ env.RELEASE_DIRECTORY }}/${{ env.OSX_ARM64_RELEASE }}/nethermind-darwin-arm64-*
    - uses: actions/upload-artifact@v3
      name: Uploading update-homebrew.sh
      with:
        name: update-homebrew-sh
        path: ./nethermind/scripts/deployment/update-homebrew.sh  

  update-homebrew:
    name: Update Homebrew to latest version
    runs-on: ubuntu-latest
    needs: build-nethermind
    env:
      OSX_RELEASE: nethermind-osx-x64
      OSX_ARM64_RELEASE: nethermind-osx-arm64
      RELEASE_DIRECTORY: /home/runner/work/nethermind/nethermind
      VERSION: ${{ github.event.inputs.tag }}
      TIMESTAMP: ${{needs.build-nethermind.outputs.BUILD_TIMESTAMP}}
      HASH: ${{needs.build-nethermind.outputs.COMMIT_HASH}} 
    steps:
      - name: Downloading Nethermind darwin package
        uses: actions/download-artifact@v3
        with:
          name: nethermind-darwin-package
          path: ${{ env.RELEASE_DIRECTORY }}/${{ env.OSX_RELEASE }}/
      - name: Downloading Nethermind darwin arm64 package
        uses: actions/download-artifact@v3
        with:
          name: nethermind-darwin-arm64-package
          path: ${{ env.RELEASE_DIRECTORY }}/${{ env.OSX_ARM64_RELEASE }}/
      - name: Downloading update-homebrew script
        uses: actions/download-artifact@v3
        with:
          name: update-homebrew-sh
          path: ${{ env.RELEASE_DIRECTORY }}/          
      - name: Checkout repository
        uses: actions/checkout@v3
        with: 
          repository: NethermindEth/homebrew-nethermind
          path: homebrew-nethermind
      - name: Update Homebrew file with new version, commit and date
        run: | 
          chmod +x ${{ env.RELEASE_DIRECTORY }}/update-homebrew.sh
          bash ${{ env.RELEASE_DIRECTORY }}/update-homebrew.sh
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.REPOSITORY_DISPATCH_TOKEN }}
          commit-message: Update Homebrew to latest release
          title: '[Release] Update Homebrew'
          reviewers: falcoxyz, AntiD2ta, matilote
          draft: false
          path: homebrew-nethermind
          add-paths: |
            nethermind.rb

  trigger-publish:
    name: Triggering publish event to different sources
    runs-on: ubuntu-latest
    needs: update-homebrew
    environment:
      name: Releases
      url: https://github.com/NethermindEth/nethermind/releases/tag/${{ github.event.inputs.tag }}
    steps:
    - run: echo "Just a middle-man job"

  publish-github:
    name: Publishing packages to Github Releases
    runs-on: ubuntu-latest
    needs: trigger-publish
    env: 
      RELEASE_DIRECTORY: /home/runner/work/nethermind/nethermind
      LIN_RELEASE: nethermind-lin-x64
      OSX_RELEASE: nethermind-osx-x64
      WIN_RELEASE: nethermind-win-x64
      LIN_ARM64_RELEASE: nethermind-lin-arm64
      OSX_ARM64_RELEASE: nethermind-osx-arm64
    steps:
    - name: Checking out Nethermind repository
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.inputs.tag }}
        path: nethermind
        fetch-depth: 0
    - uses: actions/download-artifact@v3
      name: Downloading Nethermind darwin package
      with:
        name: nethermind-darwin-package
        path: ${{ env.RELEASE_DIRECTORY }}/${{ env.OSX_RELEASE }}/
    - uses: actions/download-artifact@v3
      name: Downloading Nethermind linux package
      with:
        name: nethermind-linux-package
        path: ${{ env.RELEASE_DIRECTORY }}/${{ env.LIN_RELEASE }}/
    - uses: actions/download-artifact@v3
      name: Downloading Nethermind windows package
      with:
        name: nethermind-windows-package
        path: ${{ env.RELEASE_DIRECTORY }}/${{ env.WIN_RELEASE }}/
    - uses: actions/download-artifact@v3
      name: Downloading Nethermind linux arm64 package
      with:
        name: nethermind-linux-arm64-package
        path: ${{ env.RELEASE_DIRECTORY }}/${{ env.LIN_ARM64_RELEASE }}/
    - uses: actions/download-artifact@v3
      name: Downloading Nethermind darwin arm64 package
      with:
        name: nethermind-darwin-arm64-package
        path: ${{ env.RELEASE_DIRECTORY }}/${{ env.OSX_ARM64_RELEASE }}/
    - name: Creating Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        ./nethermind/scripts/deployment/publish-github.sh

  publish-downloads:
    name: Publishing packages to Downloads Page
    runs-on: ubuntu-latest
    needs: trigger-publish
    env: 
      RELEASE_DIRECTORY: /home/runner/work/nethermind/nethermind
      LIN_RELEASE: nethermind-lin-x64
      OSX_RELEASE: nethermind-osx-x64
      WIN_RELEASE: nethermind-win-x64
      LIN_ARM64_RELEASE: nethermind-lin-arm64
      OSX_ARM64_RELEASE: nethermind-osx-arm64
    steps:
    - name: Checking out Nethermind repository
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.inputs.tag }}
        path: nethermind
    - uses: actions/download-artifact@v3
      name: Downloading Nethermind darwin package
      with:
        name: nethermind-darwin-package
        path: ${{ env.RELEASE_DIRECTORY }}/${{ env.OSX_RELEASE }}/
    - uses: actions/download-artifact@v3
      name: Downloading Nethermind linux package
      with:
        name: nethermind-linux-package
        path: ${{ env.RELEASE_DIRECTORY }}/${{ env.LIN_RELEASE }}/
    - uses: actions/download-artifact@v3
      name: Downloading Nethermind windows package
      with:
        name: nethermind-windows-package
        path: ${{ env.RELEASE_DIRECTORY }}/${{ env.WIN_RELEASE }}/
    - uses: actions/download-artifact@v3
      name: Downloading Nethermind linux arm64 package
      with:
        name: nethermind-linux-arm64-package
        path: ${{ env.RELEASE_DIRECTORY }}/${{ env.LIN_ARM64_RELEASE }}/
    - uses: actions/download-artifact@v3
      name: Downloading Nethermind darwin arm64 package
      with:
        name: nethermind-darwin-arm64-package
        path: ${{ env.RELEASE_DIRECTORY }}/${{ env.OSX_ARM64_RELEASE }}/
    - name: Configuring GPG Key
      run: |
        mkdir -p ~/.gnupg/
        printf "${{ secrets.GPG_SIGNING_KEY }}" | base64 --decode > ~/.gnupg/private.key
        gpg --import --no-tty --batch --yes ~/.gnupg/private.key
    - name: Publishing packages to Downloads Page
      run: |
        ./nethermind/scripts/deployment/publish-downloads.sh
      env:
        DOWNLOADS_PAGE: ${{ secrets.DOWNLOADS_API_KEY }}
        PASS: ${{ secrets.GPG_PASSWORD }}

  publish-dockers:
    name: Publishing Docker images to Docker Hub
    runs-on: ubuntu-latest
    needs: trigger-publish
    steps:
    - name: Checking out Nethermind repository
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.inputs.tag }}
        fetch-depth: 0
    - name: Settings
      id: settings
      run: |
        echo ::set-output name=TAG::$(git describe --tags --abbrev=0)
        echo ::set-output name=docker_username::${{ secrets.DOCKER_USERNAME }}
        echo ::set-output name=docker_image::nethermind/nethermind
    - name: Setting up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Setting up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2
    - name: Logging to Docker Hub
      if: success()
      env:
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        echo "${DOCKER_PASSWORD}" | docker login --username "${{ steps.settings.outputs.docker_username }}" --password-stdin
    - name: Building & Pushing image to docker registry (major) / trigger DAppNode Build
      if: ${{ !contains(steps.settings.outputs.TAG, 'beta') && !contains(steps.settings.outputs.TAG, 'unstable') }}
      run: |
        docker buildx build --platform=linux/amd64,linux/arm64 -t "${{ steps.settings.outputs.docker_image }}:latest" -t "${{ steps.settings.outputs.docker_image }}:${{ steps.settings.outputs.TAG }}" -f Dockerfile --build-arg GIT_COMMIT=$(git log -1 --format=%h) . --push
        curl -s -X POST -u "${{ secrets.REPOSITORY_DISPATCH_TOKEN }}" -H "Accept: application/vnd.github.everest-preview+json" -H "Content-Type: application/json" --data '{"event_type":"dappnode", "client_payload": { "tag":"${{ steps.settings.outputs.TAG }}"}}' https://api.github.com/repos/nethermindeth/nethermind/dispatches
    - name: Building & Pushing image to docker registry  (patch)
      if: ${{ contains(steps.settings.outputs.TAG, 'beta') || contains(steps.settings.outputs.TAG, 'unstable') }}
      run: |
        docker buildx build --platform=linux/amd64,linux/arm64 -t "${{ steps.settings.outputs.docker_image }}:${{ steps.settings.outputs.TAG }}" -f Dockerfile --build-arg GIT_COMMIT=$(git log -1 --format=%h) . --push
    - name: Clearing
      if: always()
      run: |
        rm -f ${HOME}/.docker/config.json

  publish-ppa:
    name: Publishing Nethermind to PPA repository
    runs-on: ubuntu-latest
    needs: trigger-publish
    env:
      RELEASE_DIRECTORY: /home/runner/work/nethermind/nethermind
      PPA_GPG_KEYID: ${{ secrets.PPA_GPG_KEYID }}
      VERSION: ${{ github.event.inputs.tag }}
    steps:
    - run: echo "$GPG_SECRET_KEY" > SECRET_KEY
      shell: bash
      env:
        GPG_SECRET_KEY: ${{secrets.PPA_GPG_SECRET_KEY}}
    - run: echo "$GPG_PASSPHRASE" > /home/runner/work/nethermind/PASSPHRASE
      shell: bash
      env:
        GPG_PASSPHRASE: ${{secrets.PPA_GPG_PASSPHRASE}}
    - name: Import GPG key
      run: base64 --decode -i SECRET_KEY | gpg --import --no-tty --batch --yes
    - name: Import GPG Owner Trust
      run: echo ${{secrets.GPG_OWNERTRUST}} | base64 --decode | gpg --import-ownertrust
    - name: Install dependencies for PPA
      run: sudo apt update > /dev/null 2>&1 && sudo apt install debhelper devscripts -y > /dev/null 2>&1
    - name: Checking out Nethermind repository
      uses: actions/checkout@v3
      with:
        path: nethermind
    - name: Run publish PPA script
      run: | 
        chmod +x ./nethermind/scripts/deployment/publish-ppa.sh
        ./nethermind/scripts/deployment/publish-ppa.sh
