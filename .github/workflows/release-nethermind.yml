name: '[RELEASE] Nethermind'

on: 
  workflow_dispatch:
    inputs:
      tag:
        description: 'The TAG of the version you want to release.'
        required: false
        default: 'master'

jobs:
  build-nethermind:
    name: Building Nethermind Packages
    runs-on: ubuntu-latest
    env:      
      RELEASE_DIRECTORY: /home/runner/work/nethermind/nethermind
      LIN_RELEASE: nethermind-lin-x64
      OSX_RELEASE: nethermind-osx-x64
      WIN_RELEASE: nethermind-win-x64
      LIN_ARM64_RELEASE: nethermind-lin-arm64
      OSX_ARM64_RELEASE: nethermind-osx-arm64
      LINUX: linux-x64
      OSX: osx-x64
      WIN10: win10-x64
      LINUX_ARM64: linux-arm64
      OSX_ARM64: osx-arm64
    steps:
    - name: Checking out Nethermind repository
      uses: actions/checkout@master
      with:
        submodules: recursive
        path: nethermind
        ref: ${{ github.event.inputs.tag }}
        fetch-depth: 0
    - name: Checking out Nethermind Launcher repository
      uses: actions/checkout@master
      with:
        repository: NethermindEth/nethermind.launcher
        path: launcher
    - name: Setting up Node.js
      uses: actions/setup-node@master
      with:
        node-version: "14"
    - name: Setting up Build Environment
      run: |
        npm i pkg @vercel/ncc -g
    - name: Setting up dotnet
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0.x'
    - name: Setting up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Setting up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1
    - name: Setting up Packages
      run: ./nethermind/scripts/deployment/setup-packages.sh
    - name: Building Runner
      run: ./nethermind/scripts/deployment/build-runner.sh
    - name: Building Cli
      run: ./nethermind/scripts/deployment/build-cli.sh
    - name: Building Launcher
      run: ./nethermind/scripts/deployment/build-launcher.sh
    - name: Building Launcher for arm64
      run: |
        cd nethermind/
        docker buildx build --platform=linux/arm64 -t tmp-launcher -f Dockerfile.launcher . --load
        docker run --platform=linux/arm64 -v $PWD:/opt/mount --rm tmp-launcher bash -c "cp /nethermind/Nethermind.Launcher /opt/mount/"
        mv Nethermind.Launcher ${{ env.RELEASE_DIRECTORY }}/${{ env.LIN_ARM64_RELEASE }}/Nethermind.Launcher
    - name: Archiving packages
      run: ./nethermind/scripts/deployment/archive-packages.sh
    - uses: actions/upload-artifact@master
      name: Uploading Nethermind darwin package
      with:
        name: nethermind-darwin-package
        path: ${{ env.RELEASE_DIRECTORY }}/${{ env.OSX_RELEASE }}/nethermind-darwin-amd64-*
    - uses: actions/upload-artifact@master
      name: Uploading Nethermind linux package
      with:
        name: nethermind-linux-package
        path: ${{ env.RELEASE_DIRECTORY }}/${{ env.LIN_RELEASE }}/nethermind-linux-amd64-*
    - uses: actions/upload-artifact@master
      name: Uploading Nethermind windows package
      with:
        name: nethermind-windows-package
        path: ${{ env.RELEASE_DIRECTORY }}/${{ env.WIN_RELEASE }}/nethermind-windows-amd64-*
    - uses: actions/upload-artifact@master
      name: Uploading Nethermind linux arm64 package
      with:
        name: nethermind-linux-arm64-package
        path: ${{ env.RELEASE_DIRECTORY }}/${{ env.LIN_ARM64_RELEASE }}/nethermind-linux-arm64-*
    - uses: actions/upload-artifact@master
      name: Uploading Nethermind darwin arm64 package
      with:
        name: nethermind-darwin-arm64-package
        path: ${{ env.RELEASE_DIRECTORY }}/${{ env.OSX_ARM64_RELEASE }}/nethermind-darwin-arm64-*

  trigger-publish:
    name: Triggering publish event to different sources
    runs-on: ubuntu-latest
    needs: build-nethermind
    environment:
      name: Releases
      url: https://github.com/NethermindEth/nethermind/releases/tag/${{ github.event.inputs.tag }}
    steps:
    - run: echo "Just a middle-man job"


  publish-github:
    name: Publishing packages to Github Releases
    runs-on: ubuntu-latest
    needs: trigger-publish
    env: 
      RELEASE_DIRECTORY: /home/runner/work/nethermind/nethermind
      LIN_RELEASE: nethermind-lin-x64
      OSX_RELEASE: nethermind-osx-x64
      WIN_RELEASE: nethermind-win-x64
      LIN_ARM64_RELEASE: nethermind-lin-arm64
      OSX_ARM64_RELEASE: nethermind-osx-arm64
    steps:
    - name: Checking out Nethermind repository
      uses: actions/checkout@master
      with:
        ref: ${{ github.event.inputs.tag }}
        path: nethermind
        fetch-depth: 0
    - uses: actions/download-artifact@master
      name: Downloading Nethermind darwin package
      with:
        name: nethermind-darwin-package
        path: ${{ env.RELEASE_DIRECTORY }}/${{ env.OSX_RELEASE }}/
    - uses: actions/download-artifact@master
      name: Downloading Nethermind linux package
      with:
        name: nethermind-linux-package
        path: ${{ env.RELEASE_DIRECTORY }}/${{ env.LIN_RELEASE }}/
    - uses: actions/download-artifact@master
      name: Downloading Nethermind windows package
      with:
        name: nethermind-windows-package
        path: ${{ env.RELEASE_DIRECTORY }}/${{ env.WIN_RELEASE }}/
    - uses: actions/download-artifact@master
      name: Downloading Nethermind linux arm64 package
      with:
        name: nethermind-linux-arm64-package
        path: ${{ env.RELEASE_DIRECTORY }}/${{ env.LIN_ARM64_RELEASE }}/
    - uses: actions/download-artifact@master
      name: Downloading Nethermind darwin arm64 package
      with:
        name: nethermind-darwin-arm64-package
        path: ${{ env.RELEASE_DIRECTORY }}/${{ env.OSX_ARM64_RELEASE }}/
    - name: Creating Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        ./nethermind/scripts/deployment/publish-github.sh

  publish-downloads:
    name: Publishing packages to Downloads Page
    runs-on: ubuntu-latest
    needs: trigger-publish
    env: 
      RELEASE_DIRECTORY: /home/runner/work/nethermind/nethermind
      LIN_RELEASE: nethermind-lin-x64
      OSX_RELEASE: nethermind-osx-x64
      WIN_RELEASE: nethermind-win-x64
      LIN_ARM64_RELEASE: nethermind-lin-arm64
      OSX_ARM64_RELEASE: nethermind-osx-arm64
    steps:
    - name: Checking out Nethermind repository
      uses: actions/checkout@master
      with:
        ref: ${{ github.event.inputs.tag }}
        path: nethermind
    - uses: actions/download-artifact@master
      name: Downloading Nethermind darwin package
      with:
        name: nethermind-darwin-package
        path: ${{ env.RELEASE_DIRECTORY }}/${{ env.OSX_RELEASE }}/
    - uses: actions/download-artifact@master
      name: Downloading Nethermind linux package
      with:
        name: nethermind-linux-package
        path: ${{ env.RELEASE_DIRECTORY }}/${{ env.LIN_RELEASE }}/
    - uses: actions/download-artifact@master
      name: Downloading Nethermind windows package
      with:
        name: nethermind-windows-package
        path: ${{ env.RELEASE_DIRECTORY }}/${{ env.WIN_RELEASE }}/
    - uses: actions/download-artifact@master
      name: Downloading Nethermind linux arm64 package
      with:
        name: nethermind-linux-arm64-package
        path: ${{ env.RELEASE_DIRECTORY }}/${{ env.LIN_ARM64_RELEASE }}/
    - uses: actions/download-artifact@master
      name: Downloading Nethermind darwin arm64 package
      with:
        name: nethermind-darwin-arm64-package
        path: ${{ env.RELEASE_DIRECTORY }}/${{ env.OSX_ARM64_RELEASE }}/
    - name: Configuring GPG Key
      run: |
        mkdir -p ~/.gnupg/
        printf "${{ secrets.GPG_SIGNING_KEY }}" | base64 --decode > ~/.gnupg/private.key
        gpg --import --no-tty --batch --yes ~/.gnupg/private.key
    - name: Publishing packages to Downloads Page
      run: |
        ./nethermind/scripts/deployment/publish-downloads.sh
      env:
        DOWNLOADS_PAGE: ${{ secrets.DOWNLOADS_API_KEY }}
        PASS: ${{ secrets.GPG_PASSWORD }}

  publish-dockers:
    name: Publishing Docker images to Docker Hub
    runs-on: ubuntu-latest
    needs: trigger-publish
    steps:
    - name: Checking out Nethermind repository
      uses: actions/checkout@master
      with:
        ref: ${{ github.event.inputs.tag }}
        fetch-depth: 0
    - name: Settings
      id: settings
      run: |
        echo ::set-output name=TAG::$(git describe --tags --abbrev=0)
        echo ::set-output name=docker_username::${{ secrets.DOCKER_USERNAME }}
        echo ::set-output name=docker_image::nethermind/nethermind
    - name: Setting up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Setting up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1
    - name: Logging to Docker Hub
      if: success()
      env:
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        echo "${DOCKER_PASSWORD}" | docker login --username "${{ steps.settings.outputs.docker_username }}" --password-stdin
    - name: Building & Pushing image to docker registry (major) / trigger DAppNode Build
      if: ${{ !contains(steps.settings.outputs.TAG, 'beta') && !contains(steps.settings.outputs.TAG, 'unstable') }}
      run: |
        docker buildx build --platform=linux/amd64,linux/arm64 -t "${{ steps.settings.outputs.docker_image }}:latest" -t "${{ steps.settings.outputs.docker_image }}:${{ steps.settings.outputs.TAG }}" -f Dockerfile --build-arg GIT_COMMIT=$(git log -1 --format=%h) . --push
        curl -s -X POST -u "${{ secrets.REPOSITORY_DISPATCH_TOKEN }}" -H "Accept: application/vnd.github.everest-preview+json" -H "Content-Type: application/json" --data '{"event_type":"dappnode", "client_payload": { "tag":"${{ steps.settings.outputs.TAG }}"}}' https://api.github.com/repos/nethermindeth/nethermind/dispatches
    - name: Building & Pushing image to docker registry  (patch)
      if: ${{ contains(steps.settings.outputs.TAG, 'beta') || contains(steps.settings.outputs.TAG, 'unstable') }}
      run: |
        docker buildx build --platform=linux/amd64,linux/arm64 -t "${{ steps.settings.outputs.docker_image }}:${{ steps.settings.outputs.TAG }}" -f Dockerfile --build-arg GIT_COMMIT=$(git log -1 --format=%h) . --push
    - name: Clearing
      if: always()
      run: |
        rm -f ${HOME}/.docker/config.json