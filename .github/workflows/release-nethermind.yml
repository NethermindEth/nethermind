name: '[RELEASE] Nethermind'

on: 
  workflow_dispatch:
    inputs:
      tag:
        description: 'Version tag'
        required: true

permissions:
  deployments: write
  packages: write
  contents: write

env:
  RELEASE_PATH: ${{ github.workspace }}
  PACKAGE_DIR: pkg

jobs:
  build:
    name: Build Nethermind packages
    runs-on: ubuntu-latest
    outputs:
      BUILD_TIMESTAMP: ${{ steps.build-runner.outputs.BUILD_TIMESTAMP }}
      COMMIT_HASH: ${{ steps.build-runner.outputs.COMMIT_HASH }}
      PACKAGE_PREFIX: ${{ steps.archive.outputs.PACKAGE_PREFIX }}
    steps:
    - name: Check out Nethermind repository
      uses: actions/checkout@v3
      with:
        submodules: recursive
        path: nethermind
        ref: ${{ github.event.inputs.tag }}
    - name: Check out Nethermind Launcher repository
      uses: actions/checkout@v3
      with:
        repository: NethermindEth/nethermind.launcher
        path: launcher
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 14
    - name: Install npm packages
      run: npm i pkg @vercel/ncc -g
    - name: Set up .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2
    - name: Build Nethermind.Runner
      id: build-runner
      run: |
        cd nethermind/
        build_timestamp=$(date '+%s')
        commit_hash=$(git describe --always --exclude=* --abbrev=40)
        echo "BUILD_TIMESTAMP=$build_timestamp" >> $GITHUB_OUTPUT
        echo "COMMIT_HASH=$commit_hash" >> $GITHUB_OUTPUT
        echo "COMMIT_HASH_SHORT=$(echo $commit_hash | awk '{print substr($0,0,8);}')" >> $GITHUB_OUTPUT
        ./scripts/deployment/build-runner.sh ${{ github.event.inputs.tag }} $commit_hash $build_timestamp
    - name: Build Nethermind.Cli
      run: ./nethermind/scripts/deployment/build-cli.sh
    - name: Build Nethermind.Launcher
      run: ./nethermind/scripts/deployment/build-launcher.sh
    - name: Build Nethermind.Launcher for Linux arm64
      run: |
        cd nethermind/
        docker buildx build --platform=linux/arm64 -t tmp-launcher -f Dockerfile.launcher . --load
        docker run --platform=linux/arm64 -v $PWD:/opt/mount --rm tmp-launcher bash -c "cp /nethermind/Nethermind.Launcher /opt/mount/"
        mv Nethermind.Launcher ${{ env.RELEASE_PATH }}/linux-arm64/Nethermind.Launcher
    - name: Archive packages
      id: archive
      env:
        PACKAGE_PREFIX: nethermind-${{ github.event.inputs.tag }}-${{ steps.build-runner.outputs.COMMIT_HASH_SHORT }}
      run: |
        echo "PACKAGE_PREFIX=$PACKAGE_PREFIX" >> $GITHUB_OUTPUT
        ./nethermind/scripts/deployment/archive-packages.sh
    - name: Upload Nethermind Linux x64 package
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.archive.outputs.PACKAGE_PREFIX }}-linux-x64-package
        path: ${{ env.RELEASE_PATH }}/${{ env.PACKAGE_DIR }}/*linux-x64*
    - name: Upload Nethermind Linux arm64 package
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.archive.outputs.PACKAGE_PREFIX }}-linux-arm64-package
        path: ${{ env.RELEASE_PATH }}/${{ env.PACKAGE_DIR }}/*linux-arm64*
    - name: Upload Nethermind Windows x64 package
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.archive.outputs.PACKAGE_PREFIX }}-win-x64-package
        path: ${{ env.RELEASE_PATH }}/${{ env.PACKAGE_DIR }}/*win-x64*
    - name: Upload Nethermind macOS x64 package
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.archive.outputs.PACKAGE_PREFIX }}-osx-x64-package
        path: ${{ env.RELEASE_PATH }}/${{ env.PACKAGE_DIR }}/*osx-x64*
    - name: Upload Nethermind macOS arm64 package
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.archive.outputs.PACKAGE_PREFIX }}-osx-arm64-package
        path: ${{ env.RELEASE_PATH }}/${{ env.PACKAGE_DIR }}/*osx-arm64*
    - name: Upload update-homebrew.sh
      uses: actions/upload-artifact@v3
      with:
        name: update-homebrew-sh
        path: ./nethermind/scripts/deployment/update-homebrew.sh  

  update-homebrew:
    name: Update Homebrew to the latest version
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download Nethermind macOS x64 package
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.build.outputs.PACKAGE_PREFIX }}-osx-x64-package
          path: ${{ env.RELEASE_PATH }}/${{ env.PACKAGE_DIR }}
      - name: Download Nethermind macOS arm64 package
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.build.outputs.PACKAGE_PREFIX }}-osx-arm64-package
          path: ${{ env.RELEASE_PATH }}/${{ env.PACKAGE_DIR }}
      - name: Download update-homebrew.sh
        uses: actions/download-artifact@v3
        with:
          name: update-homebrew-sh
          path: ${{ env.RELEASE_PATH }}/          
      - name: Check out homebrew-nethermind repository
        uses: actions/checkout@v3
        with: 
          repository: NethermindEth/homebrew-nethermind
          path: homebrew-nethermind
      - name: Update Homebrew file with new version, commit, and date
        env:
          PACKAGE_PREFIX: ${{ needs.build.outputs.PACKAGE_PREFIX }}
          VERSION: ${{ github.event.inputs.tag }}
        run: | 
          chmod +x ${{ env.RELEASE_PATH }}/update-homebrew.sh
          bash ${{ env.RELEASE_PATH }}/update-homebrew.sh
      - name: Create pull request
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.REPOSITORY_DISPATCH_TOKEN }}
          commit-message: Update Homebrew to latest release
          title: '[Release] Update Homebrew'
          reviewers: falcoxyz, AntiD2ta, matilote
          draft: false
          path: homebrew-nethermind
          add-paths: |
            nethermind.rb

  trigger-publish:
    name: Trigger publish event to different sources
    runs-on: ubuntu-latest
    needs: update-homebrew
    environment:
      name: Releases
      url: https://github.com/NethermindEth/nethermind/releases/tag/${{ github.event.inputs.tag }}
    steps:
    - run: echo "Just a middle-man job"

  publish-github:
    name: Publish packages to GitHub Releases
    runs-on: ubuntu-latest
    needs: trigger-publish
    steps:
    - name: Check out Nethermind repository
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.inputs.tag }}
        path: nethermind
        fetch-depth: 0
    - name: Download Nethermind Linux package
      uses: actions/download-artifact@v3
      with:
        name: ${{ needs.build.outputs.PACKAGE_PREFIX }}-linux-x64-package
        path: ${{ env.RELEASE_PATH }}/${{ env.PACKAGE_DIR }}
    - name: Download Nethermind Linux arm64 package
      uses: actions/download-artifact@v3
      with:
        name: ${{ needs.build.outputs.PACKAGE_PREFIX }}-linux-arm64-package
        path: ${{ env.RELEASE_PATH }}/${{ env.PACKAGE_DIR }}
    - name: Download Nethermind Windows x64 package
      uses: actions/download-artifact@v3
      with:
        name: ${{ needs.build.outputs.PACKAGE_PREFIX }}-win-x64-package
        path: ${{ env.RELEASE_PATH }}/${{ env.PACKAGE_DIR }}
    - name: Download Nethermind macOS x64 package
      uses: actions/download-artifact@v3
      with:
        name: ${{ needs.build.outputs.PACKAGE_PREFIX }}-osx-x64-package
        path: ${{ env.RELEASE_PATH }}/${{ env.PACKAGE_DIR }}
    - name: Download Nethermind macOS arm64 package
      uses: actions/download-artifact@v3
      with:
        name: ${{ needs.build.outputs.PACKAGE_PREFIX }}-osx-arm64-package
        path: ${{ env.RELEASE_PATH }}/${{ env.PACKAGE_DIR }}
    - name: Publish
      env:
        GIT_TAG: ${{ github.event.inputs.tag }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGE_PREFIX: ${{ needs.build.outputs.PACKAGE_PREFIX }}
      run: ./nethermind/scripts/deployment/publish-github.sh

  publish-downloads:
    name: Publish packages to Downloads page
    runs-on: ubuntu-latest
    needs: trigger-publish
    steps:
    - name: Check out Nethermind repository
      uses: actions/checkout@v3
      with:
        path: nethermind
    - name: Download Nethermind Linux x64 package
      uses: actions/download-artifact@v3
      with:
        name: ${{ needs.build.outputs.PACKAGE_PREFIX }}-linux-x64-package
        path: ${{ env.RELEASE_PATH }}/${{ env.PACKAGE_DIR }}
    - name: Download Nethermind Linux arm64 package
      uses: actions/download-artifact@v3
      with:
        name: ${{ needs.build.outputs.PACKAGE_PREFIX }}-linux-arm64-package
        path: ${{ env.RELEASE_PATH }}/${{ env.PACKAGE_DIR }}
    - name: Download Nethermind Windows x64 package
      uses: actions/download-artifact@v3
      with:
        name: ${{ needs.build.outputs.PACKAGE_PREFIX }}-win-x64-package
        path: ${{ env.RELEASE_PATH }}/${{ env.PACKAGE_DIR }}
    - name: Download Nethermind macOS x64 package
      uses: actions/download-artifact@v3
      with:
        name: ${{ needs.build.outputs.PACKAGE_PREFIX }}-osx-x64-package
        path: ${{ env.RELEASE_PATH }}/${{ env.PACKAGE_DIR }}
    - name: Download Nethermind macOS arm64 package
      uses: actions/download-artifact@v3
      with:
        name: ${{ needs.build.outputs.PACKAGE_PREFIX }}-osx-arm64-package
        path: ${{ env.RELEASE_PATH }}/${{ env.PACKAGE_DIR }}
    - name: Configure GPG Key
      run: |
        mkdir -p ~/.gnupg/
        printf "${{ secrets.GPG_SIGNING_KEY }}" | base64 --decode > ~/.gnupg/private.key
        gpg --import --no-tty --batch --yes ~/.gnupg/private.key
    - name: Publish packages to Downloads page
      env:
        DOWNLOADS_PAGE: ${{ secrets.DOWNLOADS_API_KEY }}
        PACKAGE_PREFIX: ${{ needs.build.outputs.PACKAGE_PREFIX }}
        PASS: ${{ secrets.GPG_PASSWORD }}
      run: ./nethermind/scripts/deployment/publish-downloads.sh

  publish-dockers:
    name: Publish Docker images to Docker Hub
    runs-on: ubuntu-latest
    needs: trigger-publish
    env:
      DOCKER_IMAGE: nethermind/nethermind
    steps:
    - name: Check out Nethermind repository
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.inputs.tag }}
        fetch-depth: 0
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2
    - name: Log in to Docker Hub
      if: success()
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login --username "${{ secrets.DOCKER_USERNAME }}" --password-stdin
    - name: Build and push image to Docker registry (major) / trigger DAppNode build
      if: ${{ !contains(github.event.inputs.tag, 'beta') && !contains(github.event.inputs.tag, 'unstable') }}
      run: |
        docker buildx build --platform=linux/amd64,linux/arm64 -t "${{ env.DOCKER_IMAGE }}:latest" -t "${{ env.DOCKER_IMAGE }}:${{ github.event.inputs.tag }}" -f Dockerfile --build-arg COMMIT_HASH=${{ needs.build.outputs.COMMIT_HASH }} --build-arg BUILD_TIMESTAMP=${{ needs.build.outputs.BUILD_TIMESTAMP }} . --push
        curl -s -X POST -u "${{ secrets.REPOSITORY_DISPATCH_TOKEN }}" -H "Accept: application/vnd.github.everest-preview+json" -H "Content-Type: application/json" --data '{"event_type":"dappnode", "client_payload": { "tag":"${{ github.event.inputs.tag }}"}}' https://api.github.com/repos/nethermindeth/nethermind/dispatches
    - name: Build and push image to Docker registry  (patch)
      if: ${{ contains(github.event.inputs.tag, 'beta') || contains(github.event.inputs.tag, 'unstable') }}
      run: |
        docker buildx build --platform=linux/amd64,linux/arm64 -t "${{ env.DOCKER_IMAGE }}:${{ github.event.inputs.tag }}" -f Dockerfile --build-arg COMMIT_HASH=${{ needs.build.outputs.COMMIT_HASH }} --build-arg BUILD_TIMESTAMP=${{ needs.build.outputs.BUILD_TIMESTAMP }} . --push
    - name: Clear Docker cache
      if: always()
      run: |
        rm -f $HOME/.docker/config.json

  publish-ppa:
    name: Publish Nethermind to PPA repository
    runs-on: ubuntu-latest
    needs: trigger-publish
    env:
      PPA_GPG_KEYID: ${{ secrets.PPA_GPG_KEYID }}
      VERSION: ${{ github.event.inputs.tag }}
    steps:
    - run: echo "$GPG_SECRET_KEY" > SECRET_KEY
      shell: bash
      env:
        GPG_SECRET_KEY: ${{secrets.PPA_GPG_SECRET_KEY}}
    - run: echo "$GPG_PASSPHRASE" > /home/runner/work/nethermind/PASSPHRASE
      shell: bash
      env:
        GPG_PASSPHRASE: ${{secrets.PPA_GPG_PASSPHRASE}}
    - name: Import GPG key
      run: base64 --decode -i SECRET_KEY | gpg --import --no-tty --batch --yes
    - name: Import GPG owner trust
      run: echo ${{secrets.GPG_OWNERTRUST}} | base64 --decode | gpg --import-ownertrust
    - name: Install dependencies for PPA
      run: sudo apt update > /dev/null 2>&1 && sudo apt install debhelper devscripts -y > /dev/null 2>&1
    - name: Check out Nethermind repository
      uses: actions/checkout@v3
      with:
        path: nethermind
    - name: Publish to PPA
      run: | 
        chmod +x ./nethermind/scripts/deployment/publish-ppa.sh
        ./nethermind/scripts/deployment/publish-ppa.sh
