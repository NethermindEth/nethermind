name: '[RUN] Nethermind/Ethereum Tests with Code Coverage'

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  neth-tests-cc:
    if: github.repository_owner == 'NethermindEth'
    name: Running Nethermind Tests with Code Coverage
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    steps:
    - uses: actions/checkout@v2
      with: 
        submodules: true
        fetch-depth: 0
    - name: Setting up dotnet
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0.x'
    - name: Installing Linux packages
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install libsnappy-dev libc6-dev libc6
    - name: Installing macOS packages
      if: matrix.os == 'macOS-latest'
      run: brew install gmp && brew install snappy && brew install lz4 && brew install zstd
    - name: Set environment variable to exclude specific test projects
      if: matrix.os == 'ubuntu-latest'
      run: echo 'EXCLUDE_TEST_PROJECTS=/p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude="[Nethermind.HashLib]*%2c[*Test*]*"' >> "$GITHUB_ENV"
    - name: Nethermind.Abi.Test
      run: |
        dotnet test -c Release $EXCLUDE_TEST_PROJECTS src/Nethermind/Nethermind.Abi.Test
    - name: Nethermind.Api.Test
      run: |
        dotnet test -c Release $EXCLUDE_TEST_PROJECTS src/Nethermind/Nethermind.Api.Test
    - name: Nethermind.AuRa.Test
      run: |
        dotnet test -c Release $EXCLUDE_TEST_PROJECTS src/Nethermind/Nethermind.AuRa.Test
    - name: Nethermind.Baseline.Test
      run: |
        dotnet test -c Release $EXCLUDE_TEST_PROJECTS src/Nethermind/Nethermind.Baseline.Test
    - name: Nethermind.BeaconNode.Eth1Bridge.Test
      run: |
        dotnet test -c Release $EXCLUDE_TEST_PROJECTS src/Nethermind/Nethermind.BeaconNode.Eth1Bridge.Test
    - name: Nethermind.BeaconNode.Peering.Test
      run: |
        dotnet test -c Release $EXCLUDE_TEST_PROJECTS src/Nethermind/Nethermind.BeaconNode.Peering.Test
    - name: Nethermind.BeaconNode.Test
      run: |
        dotnet test -c Release $EXCLUDE_TEST_PROJECTS src/Nethermind/Nethermind.BeaconNode.Test
    - name: Nethermind.Blockchain.Test
      run: |
        dotnet test -c Release $EXCLUDE_TEST_PROJECTS src/Nethermind/Nethermind.Blockchain.Test
    - name: Nethermind.Cli.Test
      run: |
        dotnet test -c Release $EXCLUDE_TEST_PROJECTS src/Nethermind/Nethermind.Cli.Test
    - name: Nethermind.Clique.Test
      run: |
        dotnet test -c Release $EXCLUDE_TEST_PROJECTS src/Nethermind/Nethermind.Clique.Test
    - name: Nethermind.Config.Test
      run: |
        dotnet test -c Release $EXCLUDE_TEST_PROJECTS src/Nethermind/Nethermind.Config.Test
    - name: Nethermind.Core.Test
      run: |
        dotnet test -c Release $EXCLUDE_TEST_PROJECTS src/Nethermind/Nethermind.Core.Test
    - name: Nethermind.Core2.Configuration.Test
      run: |
        dotnet test -c Release $EXCLUDE_TEST_PROJECTS src/Nethermind/Nethermind.Core2.Configuration.Test
    - name: Nethermind.Core2.Test
      run: |
        dotnet test -c Release $EXCLUDE_TEST_PROJECTS src/Nethermind/Nethermind.Core2.Test
    - name: Nethermind.Cryptography.Bls.Test
      run: |
        dotnet test -c Release $EXCLUDE_TEST_PROJECTS src/Nethermind/Nethermind.Cryptography.Bls.Test
    - name: Nethermind.EthStats.Test
      run: |
        dotnet test -c Release $EXCLUDE_TEST_PROJECTS src/Nethermind/Nethermind.EthStats.Test
    - name: Nethermind.Ethash.Test
      run: |
        dotnet test -c Release $EXCLUDE_TEST_PROJECTS src/Nethermind/Nethermind.Ethash.Test
    - name: Nethermind.Evm.Test
      run: |
        dotnet test -c Release $EXCLUDE_TEST_PROJECTS src/Nethermind/Nethermind.Evm.Test
    - name: Nethermind.Facade.Test
      run: |
        dotnet test -c Release $EXCLUDE_TEST_PROJECTS src/Nethermind/Nethermind.Facade.Test
    - name: Nethermind.HealthChecks.Test
      run: |
        dotnet test -c Release $EXCLUDE_TEST_PROJECTS src/Nethermind/Nethermind.HealthChecks.Test
    - name: Nethermind.HonestValidator.Test
      run: |
        dotnet test -c Release $EXCLUDE_TEST_PROJECTS src/Nethermind/Nethermind.HonestValidator.Test
    - name: Nethermind.Logging.NLog.Test
      run: |
        dotnet test -c Release $EXCLUDE_TEST_PROJECTS src/Nethermind/Nethermind.Logging.NLog.Test
    - name: Nethermind.JsonRpc.Test
      run: |
        dotnet test -c Release $EXCLUDE_TEST_PROJECTS src/Nethermind/Nethermind.JsonRpc.Test
    - name: Nethermind.Mining.Test
      run: |
        dotnet test -c Release $EXCLUDE_TEST_PROJECTS src/Nethermind/Nethermind.Mining.Test
    - name: Nethermind.Merge.Plugin.Test
      run: |
        dotnet test -c Release $EXCLUDE_TEST_PROJECTS src/Nethermind/Nethermind.Merge.Plugin.Test
    - name: Nethermind.Mev.Test
      run: |
        dotnet test -c Release $EXCLUDE_TEST_PROJECTS src/Nethermind/Nethermind.Mev.Test
    - name: Nethermind.Network.Test
      run: |
        dotnet test -c Release $EXCLUDE_TEST_PROJECTS src/Nethermind/Nethermind.Network.Test
    - name: Nethermind.Secp256k1.Test.Linux
      run: |
        dotnet test -c Release $EXCLUDE_TEST_PROJECTS src/Nethermind/Nethermind.Secp256k1.Test
    - name: Nethermind.Runner.Test
      run: |
        dotnet test -c Release $EXCLUDE_TEST_PROJECTS src/Nethermind/Nethermind.Runner.Test
    - name: Nethermind.Synchronization.Test
      run: |
        dotnet test -c Release $EXCLUDE_TEST_PROJECTS src/Nethermind/Nethermind.Synchronization.Test
    - name: Nethermind.Specs.Test
      run: |
        dotnet test -c Release $EXCLUDE_TEST_PROJECTS src/Nethermind/Nethermind.Specs.Test
    - name: Nethermind.State.Test
      run: |
        dotnet test -c Release $EXCLUDE_TEST_PROJECTS src/Nethermind/Nethermind.State.Test
    - name: Nethermind.Trie.Test
      run: |
        dotnet test -c Release $EXCLUDE_TEST_PROJECTS src/Nethermind/Nethermind.Trie.Test
    - name: Nethermind.TxPool.Test
      run: |
        dotnet test -c Release $EXCLUDE_TEST_PROJECTS src/Nethermind/Nethermind.TxPool.Test
    - name: Nethermind.Ssz.Test
      run: |
        dotnet test -c Release $EXCLUDE_TEST_PROJECTS src/Nethermind/Nethermind.Ssz.Test
    - name: Nethermind.Wallet.Test
      run: |
        dotnet test -c Release $EXCLUDE_TEST_PROJECTS src/Nethermind/Nethermind.Wallet.Test
    - name: Nethermind.Sockets.Test
      run: |
        dotnet test -c Release $EXCLUDE_TEST_PROJECTS src/Nethermind/Nethermind.Sockets.Test
    - name: MathGmp.Native
      run: |
        dotnet test -c Release $EXCLUDE_TEST_PROJECTS src/Math.Gmp.Native/MathGmp.Native.UnitTests                
    - name: Upload Codecov Report
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v2
      with:
        name: codecov-report
        path: src/Nethermind/Nethermind.*/coverage.opencover.xml

  eth-tests-cc:
    name: Running Ethereum Tests with Code Coverage
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    steps:
    - uses: actions/checkout@v2
    - name: Setting up dotnet
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0.x'
    - name: Unshallow fetching
      run: git fetch --unshallow
    - name: Updating submodules
      run: git -c submodule."src/eth2.0-spec-tests".update=none submodule update --init
    - name: Set environment variable to exclude specific test projects
      if: matrix.os == 'ubuntu-latest'
      run: echo 'EXCLUDE_TEST_PROJECTS=/p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude="[Nethermind.HashLib]*%2c[Nethermind.Core.Test]*%2c[Nethermind.Blockchain.Test]*%2c[Ethereum.Test.Base]*"' >> "$GITHUB_ENV"
    - name: Ethereum.Abi.Test
      run: |
        dotnet test -c Release $EXCLUDE_TEST_PROJECTS src/Nethermind/Ethereum.Abi.Test
    - name: Ethereum.Basic.Test
      run: |
        dotnet test -c Release $EXCLUDE_TEST_PROJECTS src/Nethermind/Ethereum.Basic.Test
    - name: Ethereum.Blockchain.Block.Test
      run: |
        dotnet test -c Release $EXCLUDE_TEST_PROJECTS src/Nethermind/Ethereum.Blockchain.Block.Test
    - name: Ethereum.Blockchain.Test
      run: |
        dotnet test -c Release $EXCLUDE_TEST_PROJECTS src/Nethermind/Ethereum.Blockchain.Test
    - name: Ethereum.Difficulty.Test
      run: |
        dotnet test -c Release $EXCLUDE_TEST_PROJECTS src/Nethermind/Ethereum.Difficulty.Test
    - name: Ethereum.HexPrefix.Test
      run: |
        dotnet test -c Release $EXCLUDE_TEST_PROJECTS src/Nethermind/Ethereum.HexPrefix.Test
    - name: Ethereum.KeyAddress.Test
      run: |
        dotnet test -c Release $EXCLUDE_TEST_PROJECTS src/Nethermind/Ethereum.KeyAddress.Test
    - name: Ethereum.PoW.Test
      run: |
        dotnet test -c Release $EXCLUDE_TEST_PROJECTS src/Nethermind/Ethereum.Rlp.Test
    - name: Ethereum.Rlp.Test
      run: |
        dotnet test -c Release $EXCLUDE_TEST_PROJECTS src/Nethermind/Ethereum.Basic.Test
    - name: Ethereum.Transaction.Test
      run: |
        dotnet test -c Release $EXCLUDE_TEST_PROJECTS src/Nethermind/Ethereum.Transaction.Test
    - name: Ethereum.Transition.Test
      run: |
        dotnet test -c Release $EXCLUDE_TEST_PROJECTS src/Nethermind/Ethereum.Transition.Test
    - name: Ethereum.Trie.Test
      run: |
        dotnet test -c Release $EXCLUDE_TEST_PROJECTS src/Nethermind/Ethereum.Trie.Test
    - name: Upload Codecov Report
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v2
      with:
        name: codecov-report
        path: src/Nethermind/Ethereum.*/coverage.opencover.xml

  # uploads codecov reports to the codecov.io cloud
  codecov-upload:
    name: Uploading Codecov Reports
    needs: [neth-tests-cc, eth-tests-cc]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download reports from Nethermind/Ethereum projects
        uses: actions/download-artifact@v2
        with:
          name: codecov-report
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          name: codecov-nethermind
