name: Publish packages

on:
  release:
    types: [published]

jobs:
  wait:
    name: Wait for assets
    runs-on: ubuntu-latest
    if: ${{ !github.event.release.prerelease }}
    steps:
      - name: Wait to ensure assets are uploaded
        run: sleep 5m

  publish-ppa:
    name: Publish on PPA
    runs-on: ubuntu-latest
    needs: wait
    steps:
      - name: Check out Nethermind repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}
      - name: Set up GPG
        env:
          GPG_PASSPHRASE: ${{ secrets.PPA_GPG_PASSPHRASE }}
          GPG_SECRET_KEY: ${{ secrets.PPA_GPG_SECRET_KEY }}
        run: |
          echo $GPG_SECRET_KEY > SECRET_KEY
          echo $GPG_PASSPHRASE > $GITHUB_WORKSPACE/PASSPHRASE
          echo "Import GPG key"
          base64 --decode -i SECRET_KEY | gpg --import --no-tty --batch --yes
          echo "Import GPG owner trust"
          echo ${{ secrets.GPG_OWNERTRUST }} | base64 --decode | gpg --import-ownertrust
      - name: Install PPA dependencies
        run: sudo apt-get update && sudo apt-get install debhelper devscripts -y
      - name: Submit package
        env:
          PPA_GPG_KEYID: ${{ secrets.PPA_GPG_KEYID }}
          VERSION: ${{ github.event.release.tag_name }}
        working-directory: scripts/deployment
        run: |
          # This hack must be removed once we reach the v2
          echo $VERSION > ver
          fixed_version=$(awk -F. '{ print $1"."$2$3$4"0"}' ver)
          changelog="nethermind ($fixed_version) jammy; urgency=high\n"
          changelog+="  * Nethermind v$VERSION\n"
          changelog+=" -- Nethermind <devops@nethermind.io>  $(date -R)"
          echo -e "$changelog" > debian/changelog
          debuild -S -uc -us
          cd ..
          debsign -p "gpg --batch --yes --no-tty --pinentry-mode loopback --passphrase-file $GITHUB_WORKSPACE/PASSPHRASE" -S -k$PPA_GPG_KEYID nethermind_${fixed_version}_source.changes
          dput -f ppa:nethermindeth/nethermind nethermind_${fixed_version}_source.changes

  copy-ppa:
    name: Copy PPA package
    runs-on: ubuntu-latest
    needs: publish-ppa
    steps:
      - name: Wait for 1 hour
        run: sleep 1h
      - name: Install PPA dependencies
        run: |
          sudo apt-get update
          sudo apt-get install debhelper devscripts ubuntu-dev-tools -y
      - name: Install launchpadlib
        run: pip install launchpadlib --upgrade
      - name: Copy to other Ubuntu releases
        env:
          LP_CREDENTIALS_FILE: /tmp/lp_credentials
        run: |
          echo ${{ secrets.PPA_COPY_TOKEN }} | base64 --decode > /tmp/lp_credentials
          git clone https://git.launchpad.net/ubuntu-archive-tools
          cd ubuntu-archive-tools
          for release in "focal" "mantic"
          do
            python3 copy-package -y -b -p nethermindeth --ppa-name=nethermind -s jammy --to-suite=$release nethermind
          done
          rm -f /tmp/lp_credentials

  publish-winget:
    name: Publish on Windows Package Manager
    runs-on: windows-latest
    needs: wait
    steps:
      - name: Submit package
        run: |
          $releaseInfo = curl -s ${{ github.event.release.assets_url }} | ConvertFrom-Json
          $releaseUrl = $releaseInfo | Where-Object -Property name -match 'windows' | Select -ExpandProperty browser_download_url
          curl -sL https://aka.ms/wingetcreate/latest -o wingetcreate.exe
          ./wingetcreate update Nethermind.Nethermind -s -v ${{ github.event.release.tag_name }} -u $releaseUrl -t ${{ secrets.WINGET_TOKEN }}

  publish-homebrew:
    name: Publish on Homebrew
    runs-on: ubuntu-latest
    needs: wait
    env:
      FORMULA: nethermind.rb
    steps:
      - name: Check out homebrew-nethermind repository
        uses: actions/checkout@v4
        with:
          repository: NethermindEth/homebrew-nethermind
          token: ${{ secrets.REPOSITORY_DISPATCH_TOKEN }}
      - name: Update formula file
        run: |
          json=$(curl -s ${{ github.event.release.assets_url }})
          macos_x64_url=$(echo "$json" | jq -r '.[].browser_download_url | select(contains("macos-x64"))')
          macos_x64_hash=$(curl -sL $macos_x64_url | shasum -a 256 | awk '{print $1}')
          macos_arm64_url=$(echo "$json" | jq -r '.[].browser_download_url | select(contains("macos-arm64"))')
          macos_arm64_hash=$(curl -sL $macos_arm64_url | shasum -a 256 | awk '{print $1}')
          sed -i "s/version .*/version \"${{ github.event.release.tag_name }}\"/" $FORMULA
          awk -i inplace -v n=1 '/url/ { if (++count == n) sub(/url.*/, "url \"'$macos_x64_url'\""); } 1' $FORMULA
          awk -i inplace -v n=2 '/url/ { if (++count == n) sub(/url.*/, "url \"'$macos_arm64_url'\""); } 1' $FORMULA
          awk -i inplace -v n=1 '/sha256/ { if (++count == n) sub(/sha256.*/, "sha256 \"'$macos_x64_hash'\""); } 1' $FORMULA
          awk -i inplace -v n=2 '/sha256/ { if (++count == n) sub(/sha256.*/, "sha256 \"'$macos_arm64_hash'\""); } 1' $FORMULA
      - name: Submit package
        env:
          GH_TOKEN: ${{ secrets.REPOSITORY_DISPATCH_TOKEN }}
        run: |
          head_branch=feature/v${{ github.event.release.tag_name }}-${{ github.run_number }}-${{ github.run_attempt }}
          message="Update for v${{ github.event.release.tag_name }}"
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git checkout -b $head_branch
          git add $FORMULA
          git commit -am "$message"
          git push origin $head_branch
          gh pr create -B main -H $head_branch -t "$message" -b "Auto-updated Homebrew formula for Nethermind v${{ github.event.release.tag_name }}"
