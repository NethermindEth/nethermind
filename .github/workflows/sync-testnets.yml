name: Sync Testnets

on:
  push:
    branches: ["master"]
  workflow_dispatch:

jobs:
  chiado:
    name: "Run sync of chiado testnet"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
          
      - name: Configure settings
        id: settings
        run: |
          echo "BUILD_TIMESTAMP=$(date '+%s')" >> $GITHUB_OUTPUT
          echo "COMMIT_HASH=$(git describe --always --exclude=* --abbrev=40)" >> $GITHUB_OUTPUT
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build docker image
        run: docker buildx build --platform=linux/amd64 -t current_branch_image -f Dockerfile --build-arg COMMIT_HASH=${{ steps.settings.outputs.COMMIT_HASH }} --build-arg BUILD_TIMESTAMP=${{ steps.settings.outputs.BUILD_TIMESTAMP}} --load .

      - name: Setup Go environment
        uses: actions/setup-go@v4.0.0

      - name: Install Sedge environment
        run: |
          echo "Downloading sedge sources..."
          git clone https://github.com/NethermindEth/sedge.git sedge --branch main --single-branch
          echo "Sources downloaded."
          cd sedge
          echo "Building sedge..."
          make compile

      - name: Run Sedge
        working-directory: sedge
        run: |
          echo 'Generating sedge docker...'
          ./build/sedge deps install
          ./build/sedge generate --logging none -p $GITHUB_WORKSPACE/sedge \
          full-node --map-all --no-mev-boost --no-validator --network chiado \
          -c lighthouse:sigp/lighthouse:latest -e nethermind:current_branch_image \
          --el-extra-flag Sync.NonValidatorNode=true --el-extra-flag Sync.DownloadBodiesInFastSync=false \
          --el-extra-flag Sync.DownloadReceiptsInFastSync=false \
          --el-extra-flag JsonRpc.EnabledModules=[Eth,Subscribe,Trace,TxPool,Web3,Personal,Proof,Net,Parity,Health,Rpc,Debug] \
          --cl-extra-flag checkpoint-sync-url=http://139.144.26.89:4000/
          echo 'Running sedge...'
          docker compose up -d

      - name: Wait for Chiado to sync
        id: wait
        timeout-minutes: 90
        run: |
          set +e
      
          declare -A bad_logs
          bad_logs["Invalid"]=1
          bad_logs["Exception"]=1
          bad_logs["Corrupted"]=1
      
          declare -A good_logs
          good_logs["Valid. Result of a new payload:"]=1
          good_logs["WaitingForBlock"]=1
      
          declare -A found_good_logs
      
          echo "Starting Docker logs monitoring..."
          docker logs -f sedge-execution-client | while read -r line; do
            echo "$line"
      
            for bad_log in "${!bad_logs[@]}"; do
              if [[ "$line" == *"$bad_log"* ]]; then
                echo "Error: $bad_log found in Docker logs."
                exit 1
              fi
            done
      
            for good_log in "${!good_logs[@]}"; do
              if [[ "$line" == *"$good_log"* ]]; then
                found_good_logs["$good_log"]=1
              fi
            done
      
            # Check if all good logs are found
            if [[ ${#good_logs[@]} -eq ${#found_good_logs[@]} ]]; then
              echo "Node is synced."
              break
            fi
          done
          
  sepolia:
    name: "Run sync of sepolia testnet"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
          
      - name: Configure settings
        id: settings
        run: |
          echo "BUILD_TIMESTAMP=$(date '+%s')" >> $GITHUB_OUTPUT
          echo "COMMIT_HASH=$(git describe --always --exclude=* --abbrev=40)" >> $GITHUB_OUTPUT
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build docker image
        run: docker buildx build --platform=linux/amd64 -t current_branch_image -f Dockerfile --build-arg COMMIT_HASH=${{ steps.settings.outputs.COMMIT_HASH }} --build-arg BUILD_TIMESTAMP=${{ steps.settings.outputs.BUILD_TIMESTAMP}} --load .

      - name: Setup Go environment
        uses: actions/setup-go@v4.0.0

      - name: Install Sedge environment
        run: |
          echo "Downloading sedge sources..."
          git clone https://github.com/NethermindEth/sedge.git sedge --branch main --single-branch
          echo "Sources downloaded."
          cd sedge
          echo "Building sedge..."
          make compile

      - name: Run Sedge
        working-directory: sedge
        run: |
          echo 'Generating sedge docker...'
          ./build/sedge deps install
          ./build/sedge generate --logging none -p $GITHUB_WORKSPACE/sedge \
          full-node --map-all --no-mev-boost --no-validator --network sepolia \
          -c lighthouse:sigp/lighthouse:latest -e nethermind:current_branch_image \
          --el-extra-flag Sync.NonValidatorNode=true --el-extra-flag Sync.DownloadBodiesInFastSync=false \
          --el-extra-flag Sync.DownloadReceiptsInFastSync=false \
          --el-extra-flag JsonRpc.EnabledModules=[Eth,Subscribe,Trace,TxPool,Web3,Personal,Proof,Net,Parity,Health,Rpc,Debug] \
          --cl-extra-flag checkpoint-sync-url=https://beaconstate-sepolia.chainsafe.io
          echo 'Running sedge...'
          docker compose up -d
          
      - name: Wait for Sepolia to sync
        id: wait
        run: |
          set +e
      
          declare -A bad_logs
          bad_logs["Invalid"]=1
          bad_logs["Exception"]=1
          bad_logs["Corrupted"]=1
      
          declare -A good_logs
          good_logs["Valid. Result of a new payload:"]=1
          good_logs["WaitingForBlock"]=1
      
          declare -A found_good_logs
      
          echo "Starting Docker logs monitoring..."
          docker logs -f sedge-execution-client | while read -r line; do
            echo "$line"
      
            for bad_log in "${!bad_logs[@]}"; do
              if [[ "$line" == *"$bad_log"* ]]; then
                echo "Error: $bad_log found in Docker logs."
                exit 1
              fi
            done
      
            for good_log in "${!good_logs[@]}"; do
              if [[ "$line" == *"$good_log"* ]]; then
                found_good_logs["$good_log"]=1
              fi
            done
      
            # Check if all good logs are found
            if [[ ${#good_logs[@]} -eq ${#found_good_logs[@]} ]]; then
              echo "Node is synced."
              break
            fi
          done
