name: Sync Testnets

on:
  push:
    branches: ["master"]
  workflow_dispatch:

jobs:
  chiado:
    name: "Run sync of chiado testnet"
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
          
      - name: Configure settings
        id: settings
        run: |
          echo "BUILD_TIMESTAMP=$(date '+%s')" >> $GITHUB_OUTPUT
          echo "COMMIT_HASH=$(git describe --always --exclude=* --abbrev=40)" >> $GITHUB_OUTPUT
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build docker image
        run: docker buildx build --platform=linux/amd64 -t current_branch_image -f Dockerfile --build-arg COMMIT_HASH=${{ steps.settings.outputs.COMMIT_HASH }} --build-arg BUILD_TIMESTAMP=${{ steps.settings.outputs.BUILD_TIMESTAMP}} --load .

      - name: Setup Go environment
        uses: actions/setup-go@v4.0.0

      - name: Install Sedge environment
        run: |
          echo "Downloading sedge sources..."
          git clone https://github.com/NethermindEth/sedge.git sedge --branch main --single-branch
          echo "Sources downloaded."
          cd sedge
          echo "Building sedge..."
          make compile

      - name: Run Sedge
        working-directory: sedge
        run: |
          echo 'Generating sedge docker...'
          ./build/sedge deps install
          ./build/sedge generate --logging none -p $GITHUB_WORKSPACE/sedge \
          full-node --map-all --no-mev-boost --no-validator --network chiado \
          -c lighthouse:sigp/lighthouse:latest -e nethermind:current_branch_image \
          --el-extra-flag Sync.NonValidatorNode=true --el-extra-flag Sync.DownloadBodiesInFastSync=false \
          --el-extra-flag Sync.DownloadReceiptsInFastSync=false \
          --el-extra-flag JsonRpc.EnabledModules=[Eth,Subscribe,Trace,TxPool,Web3,Personal,Proof,Net,Parity,Health,Rpc,Debug] \
          --cl-extra-flag checkpoint-sync-url=http://139.144.26.89:4000/
          echo 'Running sedge...'
          docker compose up -d

      - name: Wait for Chiado to sync
        run: |        
          set +e
          
          # Check if Docker container is running
          MAX_RETRIES=10
          RETRY_COUNT=0
          while [[ ! "$(docker inspect -f '{{.State.Status}}' sedge-execution-client 2>/dev/null)" =~ "running" ]] && [[ $RETRY_COUNT -lt $MAX_RETRIES ]]; do
            echo "Docker container 'sedge-execution-client' is not running. Retrying in 10 seconds..."
            let "RETRY_COUNT+=1"
            sleep 10
          done
      
          if [[ ! "$(docker inspect -f '{{.State.Status}}' sedge-execution-client 2>/dev/null)" =~ "running" ]]; then
            echo "Error: Docker container 'sedge-execution-client' is not running after $MAX_RETRIES attempts."
            exit 404
          fi
          
          # Check readiness of the service
          RETRY_COUNT=0
          while [[ $RETRY_COUNT -lt $MAX_RETRIES ]]; do
            RESPONSE=$(curl -s --data '{"method":"eth_syncing","params":[],"id":1,"jsonrpc":"2.0"}' -H "Content-Type: application/json" localhost:8545)
            if [[ $? -eq 0 ]] && [[ -n "$RESPONSE" ]]; then
              break
            else
              echo "Service not ready. Retrying in 10 seconds..."
              let "RETRY_COUNT+=1"
              sleep 10
            fi
          done
          
          if [[ $RETRY_COUNT -eq $MAX_RETRIES ]]; then
            echo "Error: Service not ready after $MAX_RETRIES attempts."
            exit 403
          fi
      
          SYNCING_RESULT=""
          DEBUG_RESULT=""
          while [[ "$SYNCING_RESULT" != "false" ]] || [[ "$DEBUG_RESULT" != *"WaitingForBlock"* ]]; do
            sleep 10
            RESPONSE_SYNCING=$(curl -s --data '{"method":"eth_syncing","params":[],"id":1,"jsonrpc":"2.0"}' -H "Content-Type: application/json" localhost:8545)
            SYNCING_RESULT=$(echo $RESPONSE_SYNCING | jq .result)
            echo "eth_syncing endpoint response: $RESPONSE_SYNCING"
        
            RESPONSE_DEBUG=$(curl -s --data '{"method":"debug_getSyncStage","params":[],"id":1,"jsonrpc":"2.0"}' -H "Content-Type: application/json" localhost:8545)
            DEBUG_RESULT=$(echo $RESPONSE_DEBUG | jq -r .result)
            echo "debug_getSyncStage endpoint response: $RESPONSE_DEBUG"
      
          done
          echo "Sedge is synced."
                
      - name: Display Docker logs        
        working-directory: sedge
        run: docker compose logs
        
      - name: Verify health of a node
        working-directory: sedge
        run: |
          set +e
          
          dockerLogs=$(docker compose logs execution 2>/dev/null)

          validLines=$(echo "$dockerLogs" | grep -E "Valid. Result of a new payload:")
          countValid=$(if [ -z "$validLines" ]; then echo 0; else echo "$validLines" | wc -l; fi)
          if [ $countValid -lt 1 ]; then
            echo "Error: No lines found for 'Valid. Result of a new payload:' - probably node is not progressing well."
            exit 20
          fi
          
          invalidLines=$(echo "$dockerLogs" | grep -E "Invalid|Exception")
          countInvalid=$(if [ -z "$invalidLines" ]; then echo 0; else echo "$invalidLines" | wc -l; fi)
          if [ $countInvalid -gt 0 ]; then
            echo "Error: Lines found for 'Invalid' or 'Exception'"
            echo "$invalidLines"
            exit 30
          fi
          
          # If the script reaches this point, it means there were valid lines and no invalid lines.
          echo "Valid lines:"
          echo "$validLines"
          
  sepolia:
    name: "Run sync of sepolia testnet"
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
          
      - name: Configure settings
        id: settings
        run: |
          echo "BUILD_TIMESTAMP=$(date '+%s')" >> $GITHUB_OUTPUT
          echo "COMMIT_HASH=$(git describe --always --exclude=* --abbrev=40)" >> $GITHUB_OUTPUT
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build docker image
        run: docker buildx build --platform=linux/amd64 -t current_branch_image -f Dockerfile --build-arg COMMIT_HASH=${{ steps.settings.outputs.COMMIT_HASH }} --build-arg BUILD_TIMESTAMP=${{ steps.settings.outputs.BUILD_TIMESTAMP}} --load .

      - name: Setup Go environment
        uses: actions/setup-go@v4.0.0

      - name: Install Sedge environment
        run: |
          echo "Downloading sedge sources..."
          git clone https://github.com/NethermindEth/sedge.git sedge --branch main --single-branch
          echo "Sources downloaded."
          cd sedge
          echo "Building sedge..."
          make compile

      - name: Run Sedge
        working-directory: sedge
        run: |
          echo 'Generating sedge docker...'
          ./build/sedge deps install
          ./build/sedge generate --logging none -p $GITHUB_WORKSPACE/sedge \
          full-node --map-all --no-mev-boost --no-validator --network sepolia \
          -c lighthouse:sigp/lighthouse:latest -e nethermind:current_branch_image \
          --el-extra-flag Sync.NonValidatorNode=true --el-extra-flag Sync.DownloadBodiesInFastSync=false \
          --el-extra-flag Sync.DownloadReceiptsInFastSync=false \
          --el-extra-flag JsonRpc.EnabledModules=[Eth,Subscribe,Trace,TxPool,Web3,Personal,Proof,Net,Parity,Health,Rpc,Debug] \
          --cl-extra-flag checkpoint-sync-url=https://beaconstate-sepolia.chainsafe.io
          echo 'Running sedge...'
          docker compose up -d

      - name: Wait for Sepolia to sync
        run: |
          set +e
          
          # Check if Docker container is running
          MAX_RETRIES=10
          RETRY_COUNT=0
          while [[ ! "$(docker inspect -f '{{.State.Status}}' sedge-execution-client 2>/dev/null)" =~ "running" ]] && [[ $RETRY_COUNT -lt $MAX_RETRIES ]]; do
            echo "Docker container 'sedge-execution-client' is not running. Retrying in 10 seconds..."
            let "RETRY_COUNT+=1"
            sleep 10
          done
      
          if [[ ! "$(docker inspect -f '{{.State.Status}}' sedge-execution-client 2>/dev/null)" =~ "running" ]]; then
            echo "Error: Docker container 'sedge-execution-client' is not running after $MAX_RETRIES attempts."
            exit 404
          fi
          
          # Check readiness of the service
          RETRY_COUNT=0
          while [[ $RETRY_COUNT -lt $MAX_RETRIES ]]; do
            RESPONSE=$(curl -s --data '{"method":"eth_syncing","params":[],"id":1,"jsonrpc":"2.0"}' -H "Content-Type: application/json" localhost:8545)
            if [[ $? -eq 0 ]] && [[ -n "$RESPONSE" ]]; then
              break
            else
              echo "Service not ready. Retrying in 10 seconds..."
              let "RETRY_COUNT+=1"
              sleep 10
            fi
          done
          
          if [[ $RETRY_COUNT -eq $MAX_RETRIES ]]; then
            echo "Error: Service not ready after $MAX_RETRIES attempts."
            exit 403
          fi
      
          SYNCING_RESULT=""
          DEBUG_RESULT=""
          while [[ "$SYNCING_RESULT" != "false" ]] || [[ "$DEBUG_RESULT" != *"WaitingForBlock"* ]]; do
            sleep 10
            RESPONSE_SYNCING=$(curl -s --data '{"method":"eth_syncing","params":[],"id":1,"jsonrpc":"2.0"}' -H "Content-Type: application/json" localhost:8545)
            SYNCING_RESULT=$(echo $RESPONSE_SYNCING | jq .result)
            echo "eth_syncing endpoint response: $RESPONSE_SYNCING"
        
            RESPONSE_DEBUG=$(curl -s --data '{"method":"debug_getSyncStage","params":[],"id":1,"jsonrpc":"2.0"}' -H "Content-Type: application/json" localhost:8545)
            DEBUG_RESULT=$(echo $RESPONSE_DEBUG | jq -r .result)
            echo "debug_getSyncStage endpoint response: $RESPONSE_DEBUG"
      
          done
          echo "Sedge is synced."
      
      - name: Display Docker logs        
        working-directory: sedge
        run: docker compose logs
          
      - name: Verify health of a node
        working-directory: sedge
        run: |
          set +e
          
          dockerLogs=$(docker compose logs execution 2>/dev/null)

          validLines=$(echo "$dockerLogs" | grep -E "Valid. Result of a new payload:")
          countValid=$(if [ -z "$validLines" ]; then echo 0; else echo "$validLines" | wc -l; fi)
          if [ $countValid -lt 1 ]; then
            echo "Error: No lines found for 'Valid. Result of a new payload:' - probably node is not progressing well."
            exit 20
          fi
          
          invalidLines=$(echo "$dockerLogs" | grep -E "Invalid|Exception")
          countInvalid=$(if [ -z "$invalidLines" ]; then echo 0; else echo "$invalidLines" | wc -l; fi)
          if [ $countInvalid -gt 0 ]; then
            echo "Error: Lines found for 'Invalid' or 'Exception'"
            echo "$invalidLines"
            exit 30
          fi
          
          # If the script reaches this point, it means there were valid lines and no invalid lines.
          echo "Valid lines:"
          echo "$validLines"
