name: Release Nethermind Packages

on: workflow_dispatch

jobs:
  build-nethermind:
    name: Build Nethermind Packages
    runs-on: ubuntu-latest
    env: 
      RELEASE_DIRECTORY: /home/runner/work/nethermind/nethermind
      LIN_RELEASE: nethermind-lin-x64
      OSX_RELEASE: nethermind-osx-x64
      WIN_RELEASE: nethermind-win-x64
      LINUX: linux-x64
      OSX: osx-x64
      WIN10: win10-x64
    steps:
    - name: Check out Nethermind repository
      uses: actions/checkout@master
      with:
        submodules: recursive
        path: nethermind
        fetch-depth: 0
    - name: Check out Nethermind Launcher repository
      uses: actions/checkout@master
      with:
        repository: NethermindEth/nethermind.launcher
        path: launcher
    - name: Setup Node.js
      uses: actions/setup-node@master
      with:
        node-version: "13"
    - name: Setup Build Environment
      run: |
        npm install pkg -g
    - name: Setup Packages
      run: ./nethermind/scripts/deployment/setup-packages.sh
    - name: Build Runner
      run: ./nethermind/scripts/deployment/build-runner.sh
    - name: Build BeamWallet
      run: ./nethermind/scripts/deployment/build-wallet.sh
    - name: Build Cli
      run: ./nethermind/scripts/deployment/build-cli.sh
    - name: Build Launcher
      run: ./nethermind/scripts/deployment/build-launcher.sh
    - name: Archive packages
      run: ./nethermind/scripts/deployment/archive-packages.sh
    - uses: actions/upload-artifact@master
      name: Upload Nethermind darwin package
      with:
        name: nethermind-darwin-package
        path: ${{ env.RELEASE_DIRECTORY }}/${{ env.OSX_RELEASE }}/nethermind-darwin-amd64-*
    - uses: actions/upload-artifact@master
      name: Upload Nethermind linux package
      with:
        name: nethermind-linux-package
        path: ${{ env.RELEASE_DIRECTORY }}/${{ env.LIN_RELEASE }}/nethermind-linux-amd64-*
    - uses: actions/upload-artifact@master
      name: Upload Nethermind windows package
      with:
        name: nethermind-windows-package
        path: ${{ env.RELEASE_DIRECTORY }}/${{ env.WIN_RELEASE }}/nethermind-windows-amd64-*

  publish-github:
    name: Publish packages to Github Releases
    runs-on: ubuntu-latest
    needs: build-nethermind
    env: 
      RELEASE_DIRECTORY: /home/runner/work/nethermind/nethermind
      LIN_RELEASE: nethermind-lin-x64
      OSX_RELEASE: nethermind-osx-x64
      WIN_RELEASE: nethermind-win-x64
    steps:
    - name: Check out Nethermind repository
      uses: actions/checkout@master
      with:
        path: nethermind
    - uses: actions/download-artifact@master
      name: Download Nethermind darwin package
      with:
        name: nethermind-darwin-package
        path: ${{ env.RELEASE_DIRECTORY }}/${{ env.OSX_RELEASE }}/
    - uses: actions/download-artifact@master
      name: Download Nethermind linux package
      with:
        name: nethermind-linux-package
        path: ${{ env.RELEASE_DIRECTORY }}/${{ env.LIN_RELEASE }}/
    - uses: actions/download-artifact@master
      name: Download Nethermind windows package
      with:
        name: nethermind-windows-package
        path: ${{ env.RELEASE_DIRECTORY }}/${{ env.WIN_RELEASE }}/
    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        ./nethermind/scripts/deployment/publish-github.sh

  publish-downloads:
    name: Publish packages to Downloads page
    runs-on: ubuntu-latest
    needs: build-nethermind
    env: 
      RELEASE_DIRECTORY: /home/runner/work/nethermind/nethermind
      LIN_RELEASE: nethermind-lin-x64
      OSX_RELEASE: nethermind-osx-x64
      WIN_RELEASE: nethermind-win-x64
    steps:
    - name: Check out Nethermind repository
      uses: actions/checkout@master
      with:
        path: nethermind
    - uses: actions/download-artifact@master
      name: Download Nethermind darwin package
      with:
        name: nethermind-darwin-package
        path: ${{ env.RELEASE_DIRECTORY }}/${{ env.OSX_RELEASE }}/
    - uses: actions/download-artifact@master
      name: Download Nethermind linux package
      with:
        name: nethermind-linux-package
        path: ${{ env.RELEASE_DIRECTORY }}/${{ env.LIN_RELEASE }}/
    - uses: actions/download-artifact@master
      name: Download Nethermind windows package
      with:
        name: nethermind-windows-package
        path: ${{ env.RELEASE_DIRECTORY }}/${{ env.WIN_RELEASE }}/
    - name: Configure GPG Key
      run: |
        mkdir -p ~/.gnupg/
        printf "${{ secrets.GPG_SIGNING_KEY }}" | base64 --decode > ~/.gnupg/private.key
        gpg --import --no-tty --batch --yes ~/.gnupg/private.key
    - name: Publish packages to Downloads page
      run: |
        ./nethermind/scripts/deployment/publish-downloads.sh
      env:
        DOWNLOADS_PAGE: ${{ secrets.DOWNLOADS_PAGE }}
        PASS: ${{ secrets.PASS }}

  publish-dockers:
    name: Publism images do Docker Hub
    runs-on: ubuntu-latest
    steps:
    - name: Check out Nethermind repository
      uses: actions/checkout@master
      with:
        fetch-depth: 0
    - name: Settings
      id: settings
      run: |
        echo ::set-output name=TAG::$(git describe --tags --abbrev=0)
        echo ::set-output name=docker_username::${{ secrets.DOCKER_USERNAME }}
        echo ::set-output name=docker_image::nethermind/nethermind
    - name: Set up docker buildx
      id: buildx
      uses: crazy-max/ghaction-docker-buildx@v3.1.0
      with:
        version: latest
    - name: Docker Login
      if: success()
      env:
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        echo "${DOCKER_PASSWORD}" | docker login --username "${{ steps.settings.outputs.docker_username }}" --password-stdin
    - name: Build & Push image to docker registry (major) / trigger DAppNode Build
      if: ${{ !contains(steps.settings.outputs.TAG, 'beta') || !contains(steps.settings.outputs.TAG, 'unstable') }}
      run: |
        docker buildx build --platform=linux/amd64,linux/arm64,linux/arm/v7 -t "${{ steps.settings.outputs.docker_image }}:latest" -t "${{ steps.settings.outputs.docker_image }}:${{ steps.settings.outputs.TAG }}" -f Dockerfile --build-arg GIT_COMMIT=$(git log -1 --format=%h) . --push
        curl -v -X POST -u "${{ secrets.PAT_GITHUB }}" -H "Accept: application/vnd.github.everest-preview+json" -H "Content-Type: application/json" --data '{"event_type":"dappnode", "client_payload": { "tag":"${{ steps.settings.outputs.TAG }}"}}' https://api.github.com/repos/nethermindeth/nethermind/dispatches
    - name: Build & Push image to docker registry  (patch)
      if: ${{ contains(steps.settings.outputs.TAG, 'beta') || contains(steps.settings.outputs.TAG, 'unstable') }}
      run: |
        docker buildx build --platform=linux/amd64,linux/arm64,linux/arm/v7 -t "${{ steps.settings.outputs.docker_image }}:${{ steps.settings.outputs.TAG }}" -f Dockerfile --build-arg GIT_COMMIT=$(git log -1 --format=%h) . --push
    - name: Clear
      if: always()
      run: |
        rm -f ${HOME}/.docker/config.json