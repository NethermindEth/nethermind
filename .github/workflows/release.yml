name: 'Release'

on: 
  workflow_dispatch:
    inputs:
      tag:
        description: 'Version tag'
        required: true

permissions:
  deployments: write
  packages: write
  contents: write

env:
  PACKAGE_DIR: pkg
  PUB_DIR: pub
  SCRIPTS_PATH: ${{ github.workspace }}/nethermind/scripts/deployment

jobs:
  build:
    name: Build Nethermind packages
    runs-on: ubuntu-latest
    outputs:
      BUILD_TIMESTAMP: ${{ steps.build-runner.outputs.BUILD_TIMESTAMP }}
      COMMIT_HASH: ${{ steps.build-runner.outputs.COMMIT_HASH }}
      PACKAGE_PREFIX: ${{ steps.archive.outputs.PACKAGE_PREFIX }}
      PRERELEASE: ${{ steps.build-runner.outputs.PRERELEASE }}
    steps:
    - name: Check out Nethermind repository
      uses: actions/checkout@v3
      with:
        path: nethermind
        ref: ${{ github.event.inputs.tag }}
    - name: Check out Nethermind Launcher repository
      uses: actions/checkout@v3
      with:
        repository: NethermindEth/nethermind.launcher
        path: launcher
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 14
    - name: Install npm packages
      run: npm i pkg @vercel/ncc -g
    - name: Set up .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2
    - name: Build Nethermind.Runner
      id: build-runner
      run: |
        build_timestamp=$(date '+%s')
        cd nethermind && commit_hash=$(git describe --always --exclude=* --abbrev=40) && cd ..
        echo "BUILD_TIMESTAMP=$build_timestamp" >> $GITHUB_OUTPUT
        echo "COMMIT_HASH=$commit_hash" >> $GITHUB_OUTPUT
        echo "COMMIT_HASH_SHORT=$(echo $commit_hash | awk '{print substr($0,0,8);}')" >> $GITHUB_OUTPUT
        echo "PRERELEASE=${{ contains(github.event.inputs.tag, '-') }}" >> $GITHUB_OUTPUT
        $SCRIPTS_PATH/build-runner.sh ${{ github.event.inputs.tag }} $commit_hash $build_timestamp
    - name: Build Nethermind.Cli
      run: $SCRIPTS_PATH/build-cli.sh ${{ github.event.inputs.tag }} ${{ steps.build-runner.outputs.COMMIT_HASH }} ${{ steps.build-runner.outputs.BUILD_TIMESTAMP }}
    - name: Build Nethermind.Launcher
      run: $SCRIPTS_PATH/build-launcher.sh
    - name: Build Nethermind.Launcher for Linux arm64
      working-directory: nethermind
      run: |
        docker buildx build --platform=linux/arm64 -t tmp-launcher -f Dockerfile.launcher . --load
        docker run --platform=linux/arm64 -v $PWD:/opt/mount --rm tmp-launcher bash -c "cp /nethermind/Nethermind.Launcher /opt/mount/"
        mv Nethermind.Launcher $GITHUB_WORKSPACE/$PUB_DIR/linux-arm64/Nethermind.Launcher
    - name: Archive packages
      id: archive
      env:
        PACKAGE_PREFIX: nethermind-${{ github.event.inputs.tag }}-${{ steps.build-runner.outputs.COMMIT_HASH_SHORT }}
      run: |
        echo "PACKAGE_PREFIX=$PACKAGE_PREFIX" >> $GITHUB_OUTPUT
        $SCRIPTS_PATH/archive-packages.sh
    - name: Cache packages
      uses: actions/cache@v3
      with:
        path: |
          ${{ github.workspace }}/${{ env.PACKAGE_DIR }}/
          ${{ env.SCRIPTS_PATH }}/
        key: packages-${{ steps.build-runner.outputs.COMMIT_HASH }}
        
  approval:
    name: Approve
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: Releases
      url: https://github.com/NethermindEth/nethermind/releases/tag/${{ github.event.inputs.tag }}
    steps:
    - name: Wait for approval
      run: echo "Waiting for approval..."

  update-homebrew:
    name: Update Homebrew formula
    runs-on: ubuntu-latest
    needs: [approval, build]
    if: needs.build.outputs.PRERELEASE == 'false'
    steps:
    - name: Restore packages from cache
      uses: actions/cache@v3
      with:
        path: |
          ${{ github.workspace }}/${{ env.PACKAGE_DIR }}/
          ${{ env.SCRIPTS_PATH }}/
        key: packages-${{ needs.build.outputs.COMMIT_HASH }}
    - name: Check out homebrew-nethermind repository
      uses: actions/checkout@v3
      with:
        repository: NethermindEth/homebrew-nethermind
        path: homebrew-nethermind
    - name: Update formula file
      env:
        PACKAGE_PREFIX: ${{ needs.build.outputs.PACKAGE_PREFIX }}
        VERSION: ${{ github.event.inputs.tag }}
      run: | 
        cd $GITHUB_WORKSPACE/$PACKAGE_DIR
        macos_x64_hash="$(shasum -a 256 $PACKAGE_PREFIX-macos-x64.zip | awk '{print $1}')"
        macos_arm64_hash="$(shasum -a 256 $PACKAGE_PREFIX-macos-arm64.zip | awk '{print $1}')"
        echo $macos_x64_hash $macos_arm64_hash
        cd $GITHUB_WORKSPACE/homebrew-nethermind
        sed -i "s/app_version = .*/app_version = '"$VERSION"'/" nethermind.rb
        sed -i "s/package_prefix = .*/package_prefix = '"$PACKAGE_PREFIX"'/" nethermind.rb
        awk -i inplace -v n=1 '/sha256/ { if (++count == n) sub(/sha256.*/, "sha256 \"'$macos_x64_hash'\""); } 1' nethermind.rb
        awk -i inplace -v n=2 '/sha256/ { if (++count == n) sub(/sha256.*/, "sha256 \"'$macos_arm64_hash'\""); } 1' nethermind.rb
    - name: Create pull request
      uses: peter-evans/create-pull-request@v4
      with:
        token: ${{ secrets.REPOSITORY_DISPATCH_TOKEN }}
        commit-message: Update Homebrew formula
        title: '[Release] Update Homebrew'
        reviewers: falcoxyz, AntiD2ta, matilote
        draft: false
        path: homebrew-nethermind
        add-paths: |
          nethermind.rb

  publish-github:
    name: Publish to GitHub
    runs-on: ubuntu-latest
    needs: [approval, build]
    steps:
    - name: Restore packages from cache
      uses: actions/cache@v3
      with:
        path: |
          ${{ github.workspace }}/${{ env.PACKAGE_DIR }}/
          ${{ env.SCRIPTS_PATH }}/
        key: packages-${{ needs.build.outputs.COMMIT_HASH }}
    - name: Publish
      env:
        GIT_COMMIT: ${{ needs.build.outputs.COMMIT_HASH }}
        GIT_TAG: ${{ github.event.inputs.tag }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGE_PREFIX: ${{ needs.build.outputs.PACKAGE_PREFIX }}
        PRERELEASE: ${{ needs.build.outputs.PRERELEASE }}
      run: $SCRIPTS_PATH/publish-github.sh

  publish-downloads:
    name: Publish to Downloads page
    runs-on: ubuntu-latest
    needs: [approval, build]
    if: needs.build.outputs.PRERELEASE == 'false'
    steps:
    - name: Restore packages from cache
      uses: actions/cache@v3
      with:
        path: |
          ${{ github.workspace }}/${{ env.PACKAGE_DIR }}/
          ${{ env.SCRIPTS_PATH }}/
        key: packages-${{ needs.build.outputs.COMMIT_HASH }}
    - name: Configure GPG Key
      run: |
        mkdir -p ~/.gnupg/
        printf "${{ secrets.GPG_SIGNING_KEY }}" | base64 --decode > ~/.gnupg/private.key
        gpg --import --no-tty --batch --yes ~/.gnupg/private.key
    - name: Publish packages to Downloads page
      env:
        DOWNLOADS_PAGE: ${{ secrets.DOWNLOADS_API_KEY }}
        PACKAGE_PREFIX: ${{ needs.build.outputs.PACKAGE_PREFIX }}
        PASS: ${{ secrets.GPG_PASSWORD }}
      run: $SCRIPTS_PATH/publish-downloads.sh

  publish-dockers:
    name: Publish to Docker Hub
    runs-on: ubuntu-latest
    needs: [approval, build]
    env:
      DOCKER_IMAGE: nethermind/nethermind
    steps:
    - name: Check out Nethermind repository
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.inputs.tag }}
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2
    - name: Log in to Docker Hub
      if: success()
      run: |
        echo "${{ secrets.DOCKER_ACCESS_TOKEN }}" | docker login --username "${{ secrets.DOCKER_USERNAME }}" --password-stdin
    - name: Build and push image to Docker Hub / Trigger DAppNode build
      if: needs.build.outputs.PRERELEASE == 'false'
      run: |
        docker buildx build --platform=linux/amd64,linux/arm64 -t "${{ env.DOCKER_IMAGE }}:latest" -t "${{ env.DOCKER_IMAGE }}:${{ github.event.inputs.tag }}" -f Dockerfile --build-arg COMMIT_HASH=${{ needs.build.outputs.COMMIT_HASH }} --build-arg BUILD_TIMESTAMP=${{ needs.build.outputs.BUILD_TIMESTAMP }} . --push
        curl -s -X POST -u "${{ secrets.REPOSITORY_DISPATCH_TOKEN }}" -H "Accept: application/vnd.github.everest-preview+json" -H "Content-Type: application/json" -d '{"event_type":"dappnode","client_payload":{"tag":"${{ github.event.inputs.tag }}"}}' https://api.github.com/repos/$GITHUB_REPOSITORY/dispatches
    - name: Build and push image to Docker Hub
      if: needs.build.outputs.PRERELEASE == 'true'
      run: |
        docker buildx build --platform=linux/amd64,linux/arm64 -t "${{ env.DOCKER_IMAGE }}:unstable" -t "${{ env.DOCKER_IMAGE }}:${{ github.event.inputs.tag }}" -f Dockerfile --build-arg COMMIT_HASH=${{ needs.build.outputs.COMMIT_HASH }} --build-arg BUILD_TIMESTAMP=${{ needs.build.outputs.BUILD_TIMESTAMP }} . --push
    - name: Clear Docker cache
      if: always()
      run: |
        rm -f $HOME/.docker/config.json

  publish-ppa:
    name: Publish to PPA
    runs-on: ubuntu-latest
    needs: [approval, build, publish-github]
    if: needs.build.outputs.PRERELEASE == 'false'
    env:
      PPA_GPG_KEYID: ${{ secrets.PPA_GPG_KEYID }}
      VERSION: ${{ github.event.inputs.tag }}
    steps:
    - name: Restore packages from cache
      uses: actions/cache@v3
      with:
        path: |
          ${{ github.workspace }}/${{ env.PACKAGE_DIR }}/
          ${{ env.SCRIPTS_PATH }}/
        key: packages-${{ needs.build.outputs.COMMIT_HASH }}
    - name: Set up GPG
      env:
        GPG_SECRET_KEY: ${{ secrets.PPA_GPG_SECRET_KEY }}
        GPG_PASSPHRASE: ${{ secrets.PPA_GPG_PASSPHRASE }}
      run: |
        echo $GPG_SECRET_KEY > SECRET_KEY
        echo $GPG_PASSPHRASE > $GITHUB_WORKSPACE/PASSPHRASE
        echo "Import GPG key"
        base64 --decode -i SECRET_KEY | gpg --import --no-tty --batch --yes
        echo "Import GPG owner trust"
        echo ${{ secrets.GPG_OWNERTRUST }} | base64 --decode | gpg --import-ownertrust
    - name: Install PPA dependencies
      run: sudo apt update && sudo apt install debhelper devscripts -y
    - name: Publish to PPA
      run: | 
        chmod +x $SCRIPTS_PATH/publish-ppa.sh
        $SCRIPTS_PATH/publish-ppa.sh

  copy-ppa:
    name: Copy PPA package
    runs-on: ubuntu-latest
    needs: publish-ppa
    steps:
    - name: Wait for 1 hour
      run: sleep 1h
    - name: Install PPA dependencies
      run: |
        sudo apt update
        sudo apt install debhelper devscripts ubuntu-dev-tools -y --no-install-recommends
    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.x
    - name: Install launchpadlib
      run: pip install launchpadlib --upgrade
    - name: Copy to other Ubuntu releases
      env: 
        LP_CREDENTIALS_FILE: /tmp/lp_credentials
      run: |
        echo ${{ secrets.PPA_COPY_TOKEN }} | base64 --decode > /tmp/lp_credentials
        git clone https://git.launchpad.net/ubuntu-archive-tools
        cd ubuntu-archive-tools
        for release in "trusty" "bionic" "focal" "kinetic"
        do
          python3 copy-package -y -b -p nethermindeth --ppa-name=nethermind -s jammy --to-suite=$release nethermind
        done
        rm -f /tmp/lp_credentials

