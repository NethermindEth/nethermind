name: 'Hive consensus tests' 

on:
  workflow_dispatch:
    inputs:
      parallelism:
        description: 'Number of concurrently running tests in each job. With 1 or 2 timeout is likely. With 4 or more false-positive fails are likely. Recommended is 3 to avoid timeouts and reduce false-positives'
        required: true
        default: '3'
        type: choice
        options: ['1', '2', '3', '4', '8', '16']

jobs:
  create_docker_image:
    name: "Generate docker image"
    outputs:
      cleanRef: ${{ steps.cleanup.outputs.cleanRef }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.nethermind_repo_ref }}

    - name: Prepare docker tag
      id: prepare_ref
      run: |
        REF_NAME=${{ github.ref }}
        CLEAN_REF=$(echo "${REF_NAME/refs\/heads\//}" | sed 's/[^a-zA-Z0-9._-]/-/g')
        echo "CLEAN_REF=$CLEAN_REF" >> $GITHUB_ENV
        echo "cleanRef=$CLEAN_REF" >> $GITHUB_OUTPUT

    - name: Set Repo and Org Variables
      id: cleanup
      run: |
        echo "ORG_NAME=${{ github.repository_owner }}" >> $GITHUB_ENV
        echo "REPO_NAME=${{ github.event.repository.name }}" >> $GITHUB_ENV
        
    - name: Check if master branch and default additional_options
      id: check_conditions
      run: |
        ref="${{ github.ref }}"

        # Append "refs/heads/" prefix if it's not already there
        if [[ $ref != refs/heads/* ]]; then
          ref="refs/heads/$ref"
        fi

        if 
        [[ "$ref" == "refs/heads/master" ]]; then
          echo "skip_docker_build=true" >> $GITHUB_OUTPUT
        else
          echo "skip_docker_build=false" >> $GITHUB_OUTPUT
        fi

    - name: Trigger Docker Build Action with Cleaned Ref
      if: steps.check_conditions.outputs.skip_docker_build != 'true'
      uses: benc-uk/workflow-dispatch@v1
      env:
        ADDITIONAL_OPTIONS: ${{ inputs.additional_options }}
      with:
          workflow: publish-docker.yml
          ref: "${{ github.ref }}"
          token: "${{ secrets.REPOSITORY_DISPATCH_TOKEN }}"
          inputs: '{
              "tag": "${{ env.CLEAN_REF }}",
              "dockerfile": "${{ steps.extract_dockerfile.outputs.dockerfile }}",
              "build-config": "${{ steps.extract_dockerfile.outputs.build-config }}"
           }'
        
    - name: Wait for Docker Build Action to complete
      if: steps.check_conditions.outputs.skip_docker_build != 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.REPOSITORY_DISPATCH_TOKEN }}
        WORKFLOW_ID: 'publish-docker.yml'
        MAX_WAIT_MINUTES: '5'
        INTERVAL: '5'
        TIMEOUT: '10'
        ORG_NAME: ${{ env.ORG_NAME }}
        REPO_NAME: ${{ env.REPO_NAME }}
        REF: ${{ github.ref }}
      run: |
        chmod +x scripts/wait-for-workflow-completed.sh
        ./scripts/wait-for-workflow-completed.sh
      working-directory: ${{ github.workspace }}

  generate_hive_consensus_tests:
    name: "Prepare all hive tests to be started"
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    needs: [create_docker_image]
    steps:
      - name: Check out Nethermind repository
        uses: actions/checkout@v4
        with:
          path: nethermind
      - name: Generate Hive Json For Matrix
        run: |
          cd nethermind/tools/HiveConsensusWorkflowGenerator
          dotnet run .
          echo "matrix=$(jq -c . matrix.json)" >> $GITHUB_OUTPUT
          
  run_hive_tests:
    runs-on: ubuntu-latest
    needs: [generate_hive_consensus_tests, create_docker_image]
    strategy:
      max-parallel: 10
      fail-fast: false
      matrix:
        hiveTests: ${{fromJson(needs.setup-matrix.outputs.matrix)}}
    steps:
      - name: Set up parameters
        run: |
          echo "PARALLELISM=${{ github.event.inputs.parallelism || '3' }}" >> $GITHUB_ENV
      - name: Check out Nethermind repository
        uses: actions/checkout@v4
        with:
          path: nethermind
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build Docker image
        uses: docker/build-push-action@v3
        with:
          context: nethermind
          file: nethermind/Dockerfile
          tags: nethermind:test-${{ github.sha }}
          outputs: type=docker,dest=/tmp/image.tar
      - name: Install Linux packages
        run: |
          sudo apt-get update
          sudo apt-get install libsnappy-dev libc6-dev libc6 build-essential
      - name: Set up Go environment
        uses: actions/setup-go@v3.0.0
        with:
          go-version: '>=1.17.0'
      - name: Check out Hive repository
        uses: actions/checkout@v3
        with:
          repository: ethereum/hive
          ref: master
          path: hive
      - name: Patch Hive Dockerfile
        run: sed -i 's#FROM $baseimage:$tag#FROM nethermindeth/nethermind:${{needs.create_docker_image.outputs.cleanRef}}
      - name: Build Hive
        working-directory: hive
        run: go build .
      - name: Load Docker image
        run: docker load --input /tmp/image.tar
      - name: Run stArgsZeroOneBalance
        continue-on-error: true
        working-directory: hive
        run: ./hive --client nethermind --sim ethereum/consensus --sim.limit /${{ matrix.hiveTests.testName }} --sim.parallelism $PARALLELISM
      - name: Print results
        run: |
          chmod +x nethermind/scripts/hive-results.sh
          nethermind/scripts/hive-results.sh "hive/workspace/logs/*.json"

