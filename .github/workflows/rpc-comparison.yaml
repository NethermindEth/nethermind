name: '[JSON-RPC] Compare Nethermind between clients and versions'

on:
  push:
    branches:
      - 'rpc-comparision-1.23.0'
  workflow_dispatch:
    inputs:
      allowed_ips:
        type: string
        description: "A comma-separated list of ips allowed to connect to the node"
        default: ''
        required: false
      what_to_compare:
        type: string
        description: "A space-separated list of branches. If empty, then selected branch will be used. If multiple specified, those will be compared to themselves."
        default: ""
        required: false
      compare_with:
        type: string
        description: "A space-separated list of additional comparers. If empty, then nothing else will be added to comparision. Possible options: 'infura', 'archive', 'feature/branch'"
        default: ""
        required: false

jobs:
  parse_input:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Install jq
        run: sudo apt-get install jq

      - name: Set matrix for branches
        id: set-matrix
        run: |
          #what_to_compare="${{ github.event.inputs.what_to_compare }}"
          #compare_with="${{ github.event.inputs.compare_with }}"

          what_to_compare=""
          compare_with="infura"

          # Determine the primary branches to compare
          if [[ "$what_to_compare" == "" ]]; then
            current_branch=${GITHUB_REF#refs/heads/}
            branches=("$current_branch")
          else
            readarray -t branches <<< "$what_to_compare"
          fi

          # Add additional comparers if specified
          if [[ "$compare_with" != "" ]]; then
            IFS=' ' read -r -a additional_branches <<< "$compare_with"
            for branch in "${additional_branches[@]}"; do
              if [[ "$branch" != "infura" && "$branch" != "archive" ]]; then
                # Treat as additional branch
                branches+=("$branch")
              fi
            done
          fi

          # Convert array to JSON object with named array
          printf -v joined ', "%s"' "${branches[@]}"
          MATRIX="{\"branch\": [${joined:2}]}"  # Ensure the key name 'branch' is used

          echo $MATRIX > matrix.json
          cat matrix.json
          echo "matrix=$(jq -c . matrix.json)" >> $GITHUB_OUTPUT

  create_node:
    needs: parse_input
    name: Create node from current branch
    uses: ./.github/workflows/run-a-single-node-from-branch.yml
    secrets: inherit
    strategy:
      matrix: ${{ fromJson(needs.parse_input.outputs.matrix) }}
    with:
      additional_options: '{"timeout":"24", "default_dockerfile":"Dockerfile", "default_dockerfile_build_type":"release", "ssh_keys":"", "allowed_ips":"${{ inputs.allowed_ips }}"}' 
      non_validator_mode: false
      additional_nethermind_flags: Pruning.Mode=None
      nethermind_repo_ref: ${{ matrix.branch }}
      custom_run_id: ${{ github.run_id }}

  aggregate_rpcs:
    name: Collect all RPC Urls and pass it further
    runs-on: ubuntu-latest
    needs: create_node
    outputs:
      rpc_urls: ${{ steps.aggregate_rpcs.outputs.rpc_urls }}
    steps:
      - name: Download artifacts using GitHub CLI
        id: aggregate_rpcs
        run: |
          # Install GitHub CLI
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh

          # Authenticate GitHub CLI
          echo "${{ secrets.REPOSITORY_DISPATCH_TOKEN }}" | gh auth login --with-token
          
          rpc_urls=""
          branches=${{ toJson(needs.parse_input.outputs.matrix.branch) }}
          for branch in $branches; do
            artifact_name="rpc-url-$branch-${{ github.run_id }}"
            mkdir -p artifacts/$branch

            echo "Downloading artifact: $artifact_name"
            gh run download --name "$artifact_name" --repo ${{ github.repository }} --dir artifacts/$branch

            if [ -f "artifacts/$branch/$artifact_name.txt" ]; then
              url_content=$(cat "artifacts/$branch/$artifact_name.txt")
              rpc_urls+="${url_content},"
            fi
          done
          rpc_urls=${rpc_urls%,}
          echo "rpc_urls=$rpc_urls" >> $GITHUB_OUTPUT     

  wait_for_node_to_sync:
    name: Wait for the node to sync
    runs-on: ubuntu-latest
    needs: [create_node]
    timeout-minutes: 600
    steps:
      - uses: actions/checkout@v3
      - name: Install WireGuard
        run: |
          sudo apt update
          sudo apt install -y wireguard resolvconf
          sudo mkdir -p /etc/wireguard
          envsubst < scripts/wireguard.conf.template > wg0.conf
          sudo wg-quick up ./wg0.conf
        env:
          WIREGUARD_PRIVKEY: '${{ secrets.WIREGUARD_PRIVKEY }}'
          WIREGUARD_ADDRESS: '${{ secrets.WIREGUARD_ADDRESS }}'
          WIREGUARD_DNS: '${{ secrets.WIREGUARD_DNS }}'
          WIREGUARD_PUBKEY: '${{ secrets.WIREGUARD_PUBKEY }}'
          WIREGUARD_PRESHAREDKEY: '${{ secrets.WIREGUARD_PRESHAREDKEY }}'
          WIREGUARD_ALLOWED_IPS: '${{ secrets.WIREGUARD_ALLOWED_IPS }}'
          WIREGUARD_SERVER_IP: '${{ secrets.WIREGUARD_SERVER_IP }}'
          WIREGUARD_SERVER_PORT: '${{ secrets.WIREGUARD_SERVER_PORT }}'
      
      - name: Wait for the nodes to sync
        timeout-minutes: 600
        run: |
          rpc_urls=(${{ needs.extract_rpc_url.outputs.rpc_urls }})
          sync_complete_flag=0

          check_sync() {
            rpc_url=$1
            while curl -X POST --data '{"jsonrpc":"2.0","method":"eth_syncing","params":[],"id":1}' $rpc_url | jq -e '.result'; do
              sleep 300
            done
            echo "Node at $rpc_url synced."
            sync_complete_flag=$((sync_complete_flag+1))
          }

          for url in "${rpc_urls[@]}"; do
            check_sync "$url" &
          done

          # Wait for all nodes to sync
          while [ $sync_complete_flag -ne ${#rpc_urls[@]} ]; do
            sleep 60
          done

  compare:
    name: Compare JSON-RPC responses between clients and versions
    runs-on: ubuntu-latest
    needs: [create_node, wait_for_node_to_sync]
    strategy:
      matrix:
        rpc_to_compare: [INFURA_ENDPOINT, NETHERMIND_ARCHIVE_ENDPOINT]
    steps:
      - uses: actions/checkout@v3
      - name: Install flood
        run: pip install git+https://github.com/piwonskp/flood.git
  
      - name: Install WireGuard
        run: |
          sudo apt update
          sudo apt install -y wireguard resolvconf
          sudo mkdir -p /etc/wireguard
          envsubst < scripts/wireguard.conf.template > wg0.conf
          sudo wg-quick up ./wg0.conf
        env:
          WIREGUARD_PRIVKEY: '${{ secrets.WIREGUARD_PRIVKEY }}'
          WIREGUARD_ADDRESS: '${{ secrets.WIREGUARD_ADDRESS }}'
          WIREGUARD_DNS: '${{ secrets.WIREGUARD_DNS }}'
          WIREGUARD_PUBKEY: '${{ secrets.WIREGUARD_PUBKEY }}'
          WIREGUARD_PRESHAREDKEY: '${{ secrets.WIREGUARD_PRESHAREDKEY }}'
          WIREGUARD_ALLOWED_IPS: '${{ secrets.WIREGUARD_ALLOWED_IPS }}'
          WIREGUARD_SERVER_IP: '${{ secrets.WIREGUARD_SERVER_IP }}'
          WIREGUARD_SERVER_PORT: '${{ secrets.WIREGUARD_SERVER_PORT }}'
  
      - name: Test equality of responses
        run: flood all nethermind_current=${{ needs.extract_rpc_url.outputs.rpc_url }} ${{ matrix.rpc_to_compare }}=${{ secrets[matrix.rpc_to_compare] }} --equality
