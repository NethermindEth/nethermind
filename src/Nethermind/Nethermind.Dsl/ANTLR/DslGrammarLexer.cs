//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DslGrammar.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class DslGrammarLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OPERATOR=1, ARITHMETIC_SYMBOL=2, SOURCE=3, WATCH=4, WHERE=5, PUBLISH=6, 
		IS=7, NOT=8, WORD=9, DIGIT=10, ADDRESS=11, WS=12;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"OPERATOR", "ARITHMETIC_SYMBOL", "SOURCE", "WATCH", "WHERE", "PUBLISH", 
		"IS", "NOT", "WORD", "DIGIT", "ADDRESS", "WS"
	};


	public DslGrammarLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public DslGrammarLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, "'SOURCE'", "'WATCH'", "'WHERE'", "'PUBLISH'", "'IS'", 
		"'NOT'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OPERATOR", "ARITHMETIC_SYMBOL", "SOURCE", "WATCH", "WHERE", "PUBLISH", 
		"IS", "NOT", "WORD", "DIGIT", "ADDRESS", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DslGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static DslGrammarLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\xE', '\x66', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', ' ', '\n', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', ')', '\n', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\n', '\x6', '\n', 'N', '\n', '\n', '\r', '\n', 
		'\xE', '\n', 'O', '\x3', '\v', '\x6', '\v', 'S', '\n', '\v', '\r', '\v', 
		'\xE', '\v', 'T', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\a', '\f', '[', '\n', '\f', '\f', '\f', '\xE', '\f', '^', '\v', '\f', 
		'\x3', '\r', '\x6', '\r', '\x61', '\n', '\r', '\r', '\r', '\xE', '\r', 
		'\x62', '\x3', '\r', '\x3', '\r', '\x2', '\x2', '\xE', '\x3', '\x3', '\x5', 
		'\x4', '\a', '\x5', '\t', '\x6', '\v', '\a', '\r', '\b', '\xF', '\t', 
		'\x11', '\n', '\x13', '\v', '\x15', '\f', '\x17', '\r', '\x19', '\xE', 
		'\x3', '\x2', '\a', '\x4', '\x2', '>', '>', '@', '@', '\x4', '\x2', '\x43', 
		'\\', '\x63', '|', '\x3', '\x2', '\x32', ';', '\x5', '\x2', '\x32', ';', 
		'\x43', 'H', '\x63', 'h', '\x5', '\x2', '\v', '\f', '\xF', '\xF', '\"', 
		'\"', '\x2', 'p', '\x2', '\x3', '\x3', '\x2', '\x2', '\x2', '\x2', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x15', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x2', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x3', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x5', '(', '\x3', '\x2', 
		'\x2', '\x2', '\a', '*', '\x3', '\x2', '\x2', '\x2', '\t', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\v', '\x37', '\x3', '\x2', '\x2', '\x2', '\r', '=', 
		'\x3', '\x2', '\x2', '\x2', '\xF', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'\x11', 'H', '\x3', '\x2', '\x2', '\x2', '\x13', 'M', '\x3', '\x2', '\x2', 
		'\x2', '\x15', 'R', '\x3', '\x2', '\x2', '\x2', '\x17', 'V', '\x3', '\x2', 
		'\x2', '\x2', '\x19', '`', '\x3', '\x2', '\x2', '\x2', '\x1B', ' ', '\x5', 
		'\a', '\x4', '\x2', '\x1C', ' ', '\x5', '\t', '\x5', '\x2', '\x1D', ' ', 
		'\x5', '\v', '\x6', '\x2', '\x1E', ' ', '\x5', '\r', '\a', '\x2', '\x1F', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x1F', '\x1C', '\x3', '\x2', '\x2', 
		'\x2', '\x1F', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x1F', '\x1E', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\x4', '\x3', '\x2', '\x2', '\x2', '!', ')', 
		'\t', '\x2', '\x2', '\x2', '\"', '#', '\a', '>', '\x2', '\x2', '#', ')', 
		'\a', '?', '\x2', '\x2', '$', '%', '\a', '@', '\x2', '\x2', '%', ')', 
		'\a', '?', '\x2', '\x2', '&', ')', '\x5', '\xF', '\b', '\x2', '\'', ')', 
		'\x5', '\x11', '\t', '\x2', '(', '!', '\x3', '\x2', '\x2', '\x2', '(', 
		'\"', '\x3', '\x2', '\x2', '\x2', '(', '$', '\x3', '\x2', '\x2', '\x2', 
		'(', '&', '\x3', '\x2', '\x2', '\x2', '(', '\'', '\x3', '\x2', '\x2', 
		'\x2', ')', '\x6', '\x3', '\x2', '\x2', '\x2', '*', '+', '\a', 'U', '\x2', 
		'\x2', '+', ',', '\a', 'Q', '\x2', '\x2', ',', '-', '\a', 'W', '\x2', 
		'\x2', '-', '.', '\a', 'T', '\x2', '\x2', '.', '/', '\a', '\x45', '\x2', 
		'\x2', '/', '\x30', '\a', 'G', '\x2', '\x2', '\x30', '\b', '\x3', '\x2', 
		'\x2', '\x2', '\x31', '\x32', '\a', 'Y', '\x2', '\x2', '\x32', '\x33', 
		'\a', '\x43', '\x2', '\x2', '\x33', '\x34', '\a', 'V', '\x2', '\x2', '\x34', 
		'\x35', '\a', '\x45', '\x2', '\x2', '\x35', '\x36', '\a', 'J', '\x2', 
		'\x2', '\x36', '\n', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\a', 
		'Y', '\x2', '\x2', '\x38', '\x39', '\a', 'J', '\x2', '\x2', '\x39', ':', 
		'\a', 'G', '\x2', '\x2', ':', ';', '\a', 'T', '\x2', '\x2', ';', '<', 
		'\a', 'G', '\x2', '\x2', '<', '\f', '\x3', '\x2', '\x2', '\x2', '=', '>', 
		'\a', 'R', '\x2', '\x2', '>', '?', '\a', 'W', '\x2', '\x2', '?', '@', 
		'\a', '\x44', '\x2', '\x2', '@', '\x41', '\a', 'N', '\x2', '\x2', '\x41', 
		'\x42', '\a', 'K', '\x2', '\x2', '\x42', '\x43', '\a', 'U', '\x2', '\x2', 
		'\x43', '\x44', '\a', 'J', '\x2', '\x2', '\x44', '\xE', '\x3', '\x2', 
		'\x2', '\x2', '\x45', '\x46', '\a', 'K', '\x2', '\x2', '\x46', 'G', '\a', 
		'U', '\x2', '\x2', 'G', '\x10', '\x3', '\x2', '\x2', '\x2', 'H', 'I', 
		'\a', 'P', '\x2', '\x2', 'I', 'J', '\a', 'Q', '\x2', '\x2', 'J', 'K', 
		'\a', 'V', '\x2', '\x2', 'K', '\x12', '\x3', '\x2', '\x2', '\x2', 'L', 
		'N', '\t', '\x3', '\x2', '\x2', 'M', 'L', '\x3', '\x2', '\x2', '\x2', 
		'N', 'O', '\x3', '\x2', '\x2', '\x2', 'O', 'M', '\x3', '\x2', '\x2', '\x2', 
		'O', 'P', '\x3', '\x2', '\x2', '\x2', 'P', '\x14', '\x3', '\x2', '\x2', 
		'\x2', 'Q', 'S', '\t', '\x4', '\x2', '\x2', 'R', 'Q', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'T', '\x3', '\x2', '\x2', '\x2', 'T', 'R', '\x3', '\x2', '\x2', 
		'\x2', 'T', 'U', '\x3', '\x2', '\x2', '\x2', 'U', '\x16', '\x3', '\x2', 
		'\x2', '\x2', 'V', 'W', '\a', '\x32', '\x2', '\x2', 'W', 'X', '\a', 'z', 
		'\x2', '\x2', 'X', '\\', '\x3', '\x2', '\x2', '\x2', 'Y', '[', '\t', '\x5', 
		'\x2', '\x2', 'Z', 'Y', '\x3', '\x2', '\x2', '\x2', '[', '^', '\x3', '\x2', 
		'\x2', '\x2', '\\', 'Z', '\x3', '\x2', '\x2', '\x2', '\\', ']', '\x3', 
		'\x2', '\x2', '\x2', ']', '\x18', '\x3', '\x2', '\x2', '\x2', '^', '\\', 
		'\x3', '\x2', '\x2', '\x2', '_', '\x61', '\t', '\x6', '\x2', '\x2', '`', 
		'_', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', '\x3', '\x2', '\x2', 
		'\x2', '\x62', '`', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', '\x3', 
		'\x2', '\x2', '\x2', '\x63', '\x64', '\x3', '\x2', '\x2', '\x2', '\x64', 
		'\x65', '\b', '\r', '\x2', '\x2', '\x65', '\x1A', '\x3', '\x2', '\x2', 
		'\x2', '\t', '\x2', '\x1F', '(', 'O', 'T', '\\', '\x62', '\x3', '\b', 
		'\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
