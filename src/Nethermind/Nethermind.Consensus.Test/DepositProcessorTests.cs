// SPDX-FileCopyrightText: 2024 Demerzel Solutions Limited
// SPDX-License-Identifier: LGPL-3.0-only

using System.Linq;
using Nethermind.Abi;
using Nethermind.Core.ConsensusRequests;
using Nethermind.Core.Extensions;
using Nethermind.Int256;
using NUnit.Framework;


namespace Nethermind.Consensus.Test;

public class DepositProcessorTests
{
    private AbiSignature depositEventABI = new AbiSignature("DepositEvent", AbiType.DynamicBytes, AbiType.DynamicBytes, AbiType.DynamicBytes, AbiType.DynamicBytes, AbiType.DynamicBytes);

    // ToDo this test is not finished and needs to be rewritten
    [Test]
    public void CanParseDeposit()
    {
        var deposit = new Deposit()
        {
            Amount = 32000000000,
            Index = 0,
            Pubkey = Bytes.FromHexString(
                "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"),
            Signature = Bytes.FromHexString(
                "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003"),
            WithdrawalCredentials =
                Bytes.FromHexString("0000000000000000000000000000000000000000000000000000000000000002")
        };
        var bytes = Bytes.FromHexString(
            "00000000000000000000000000000000000000000000000000000000000000a
        AbiEncoder abiEncoder = AbiEncoder.Instance;
        var result = abiEncoder.Decode(AbiEncodingStyle.None, depositEventABI, bytes);

        var newDeposit = new Deposit()
        {
            Pubkey = (byte[])result[0],
            WithdrawalCredentials = (byte[])result[1],
            Amount = (ulong)new UInt256((byte[])result[2]),
            Signature = (byte[])result[3],
            Index = (ulong)new UInt256((byte[])result[4])
        };


    }
}
