// SPDX-FileCopyrightText: 2025 Demerzel Solutions Limited
// SPDX-License-Identifier: LGPL-3.0-only

using System;
using System.Linq;
using FluentAssertions;
using Nethermind.Abi;
using Nethermind.Core;
using Nethermind.Core.Crypto;
using Nethermind.Core.Extensions;
using Nethermind.Core.Test.Builders;
using Nethermind.Evm.CodeAnalysis.IL;
using Nethermind.Evm.Tracing;
using Nethermind.Evm.Tracing.GethStyle;
using Nethermind.Evm.Tracing.ParityStyle;
using Nethermind.Evm.TransactionProcessing;
using Nethermind.Int256;
using Nethermind.Specs;
using NUnit.Framework;
using Bytes = Nethermind.Core.Extensions.Bytes;

namespace Nethermind.Evm.Test.ILEVM;

// Erc20Router
//  https://etherscan.io/address/0xeeeeee9ec4769a09a76a83c7bc42b185872860ee#code
//: permit2:
// https://etherscan.io/address/0x000000000022D473030F116dDEE9F6B43aC78BA3#code

[NonParallelizable]
[TestFixture(false)]
[TestFixture(true)]
public class Erc20RouterTests(bool useIlEvm) : RealContractTestsBase(useIlEvm)
{
    [SetUp]
    public void Init()
    {
        AotContractsRepository.ClearCache();
        Precompiler.ResetEnvironment(true);

        Metrics.IlvmAotPrecompiledCalls = 0;
    }

    private static readonly Address Erc20RouterAddress = SenderRecipientAndMiner.Default.Recipient;

    private Address Permit2Address = new Address("000000000022D473030F116dDEE9F6B43aC78BA3");

    private static readonly Address SenderAddress = SenderRecipientAndMiner.Default.Sender;

    private static readonly Address CalledAddressA = TestItem.PrivateKeyD.Address;

    private static readonly byte[] CalledWithDataA = TestItem.RandomDataA;

    private static readonly UInt256 CalledWithValueA = new UInt256(1000);
    private static UInt256 SenderInitialBalance = 100.Ether();
    private static UInt256 RecipientInitialBalance = 100.Ether();
    private StorageCell CalledAddressCell = new(CalledAddressA, new UInt256(2, 0, 0, 0));

    private byte[] CalledContractA = Prepare.EvmCode
        .CALLDATALOAD(0)
        .PUSHx([232])
        .SHR()
        .PushData(CalledWithDataA)
        .EQ()
        .JUMPI(15)
        .STOP()
        .JUMPDEST()
        .CALLVALUE()
        .SLOAD(2)
        .ADD()
        .PushData(2)
        .SSTORE()
        .Done;


    private static readonly AbiEncoder _abiEncoder = AbiEncoder.Instance;

    public static byte[] EncodePermitMulticall(
        Address user,
       ((Address token, UInt256 amount)[] permitted, UInt256 nonce, UInt256 deadline) PermitBatchTransferFrom,
        Address[] targets,
        byte[][] datas,
        UInt256[] values,
        Address refundTo,
        byte[] signature)
    {
        var permitTuple = new ValueTuple<object, UInt256, UInt256>(
             PermitBatchTransferFrom.permitted,
             PermitBatchTransferFrom.nonce,
             PermitBatchTransferFrom.deadline
         );

        var abiSignature = new AbiSignature(
            "permitMulticall",
            AbiType.Address, // user address
            new AbiTuple(
                new AbiArray(new AbiTuple(AbiType.Address, AbiType.UInt256)), // (tokenAddress, amount) TokenPermissions[] permitted
                AbiType.UInt256, // nonce
                AbiType.UInt256 // deadline
            ), // PermitBatchTransferFrom memory permit
            new AbiArray(AbiType.Address), // address[] calldata targets
            new AbiArray(AbiType.DynamicBytes), // bytes[] calldata datas
            new AbiArray(AbiType.UInt256), // uint256[] calldata values
            AbiType.Address, // address refundTo
            AbiType.DynamicBytes // bytes memory permitSignature
        );

        return _abiEncoder.Encode(
            AbiEncodingStyle.None,
            abiSignature,
            user,
            permitTuple,
            targets,
            datas,
            values,
            refundTo,
            signature
        );
    }

    public static byte[] GenerateMulticall(int n)
    {
        // Create arrays of length `n` filled with the same A values
        var targets = Enumerable.Repeat(CalledAddressA, n).ToArray();
        var data = Enumerable.Repeat(CalledWithDataA, n).ToArray();
        var values = Enumerable.Repeat(CalledWithValueA, n).ToArray();

        // Call your EncodePermitMulticall function
        byte[] multiCallData = EncodePermitMulticall(
            SenderAddress,
            ([], new UInt256(0), new UInt256(0)),
            targets,
            data,
            values,
            SenderAddress,
            []
        );

        return multiCallData;
    }

    [TestCase(2)]
    [Test]
    public void PermitMultiCall(int calls)
    {
        UInt256 valuePerCall = CalledWithValueA; // Value per call
        UInt256 excessValue = 20000;
        UInt256 gasLimit = 1000000;
        UInt256 totalValue = (valuePerCall * (new UInt256((ulong)calls))) + excessValue;

        byte[] multiCallData = GenerateMulticall(calls);

        InsertCode(CalledContractA, CalledAddressA);
        InsertCode(Permit2DeployedBytecode, Permit2Address);

        var data = PermitMulticallSelector
            .Concat(multiCallData)
            .ToArray();

        var activation = MainnetSpecProvider.PragueActivation;

        (Block block, Transaction transaction) = PrepareTx(activation, gasLimit.ToLong(), Bytecode, data, totalValue);

        var previousBalance = GetAccountBalance(CalledAddressA);

        ExecuteNoPrepare(block, transaction, NullTxTracer.Instance, Activation, gasLimit.ToLong(), null, true);

        AssertSenderBalance(totalValue, excessValue);
        AssertBalance(CalledAddressCell, CalledWithValueA * (new UInt256((ulong)calls)));
    }

    private void AssertSenderBalance(UInt256 totalValue, UInt256 excessValue)
    {
        var senderBalance = GetAccountBalance(SenderAddress);

        // Actual expected balance
        //UInt256 expectedSenderBalance = SenderInitialBalance + RecipientInitialBalance - totalValue - gasLimit + excessValue + new UInt256((ulong)GasRemaining);

        // Work around since ilevm does not  correclty trace gas
        senderBalance.Should().BeGreaterThanOrEqualTo(SenderInitialBalance + excessValue - totalValue, "The sender's balance should be updated correctly after the call with excess value returned");

        //When above is fixed
        //senderBalance.Should().Be(expectedSenderBalance)
    }

    private void AssertBalance(in StorageCell cell, UInt256 expected)
    {
        ReadOnlySpan<byte> read = TestState.Get(cell);
        UInt256 after = new UInt256(read);
        after.Should().Be(expected);
    }


    protected override byte[] Bytecode => Bytes.FromHexString(
        "0x60806040526004361015610015575b36610d4257005b5f3560e01c8063150b7a02146100a45780633806a3cf1461009f5780633dad0c9c1461009a57806366b9ca7b146100955780636e305f80146100905780637423eb3c1461008b578063bc197c8114610086578063c99a0d65146100815763f23a6e610361000e57610936565b6108fc565b610855565b61078d565b610663565b6105b9565b6103a9565b61037a565b34610174576080366003190112610174576100c060043561018a565b6100cb60243561018a565b6064356001600160401b038111610174576100ea9036906004016101b7565b906100f3610dc9565b906001600160a01b0382161561017857333b15610174575f9161012f6040519485938493635c46a7ef60e11b8552604435903060048701610a1b565b038183335af1801561016f57610156575b604051630a85bd0160e11b8152602090f35b0390f35b8061016361016992610202565b806101e4565b80610140565b610a4f565b5f80fd5b60405163f36675c360e01b8152600490fd5b6001600160a01b0381160361017457565b600435906101a88261018a565b565b60a435906101a88261018a565b9181601f84011215610174578235916001600160401b038311610174576020838186019501011161017457565b5f91031261017457565b634e487b7160e01b5f52604160045260245ffd5b6001600160401b03811161021557604052565b6101ee565b606081019081106001600160401b0382111761021557604052565b604081019081106001600160401b0382111761021557604052565b608081019081106001600160401b0382111761021557604052565b90601f801991011681019081106001600160401b0382111761021557604052565b604051906101a882610235565b6001600160401b03811161021557601f01601f191660200190565b6040519060a082018281106001600160401b03821117610215576040526064825263756e742960e01b6080837f52656c617965725769746e657373207769746e6573732952656c61796572576960208201527f746e65737328616464726573732072656c6179657229546f6b656e5065726d6960408201527f7373696f6e73286164647265737320746f6b656e2c75696e7432353620616d6f60608201520152565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b34610174575f366003190112610174576101526103956102b4565b604051918291602083526020830190610356565b34610174576040366003190112610174576004356103c68161018a565b602435906103d38261018a565b6103db610e20565b6040516370a0823160e01b81523060048201526001600160a01b039190911691602082602481865afa91821561016f575f92610434575b5081610423575b610421610e79565b005b61042c92610e80565b5f8080610419565b9091506020813d602011610460575b816104506020938361026b565b810103126101745751905f610412565b3d9150610443565b6001600160401b0381116102155760051b60200190565b90916060828403126101745760408051906104998261021a565b819380356001600160401b03811161017457810186601f820112156101745780356020916104c682610468565b916104d38651938461026b565b808352838084019160061b830101918a8311610174578401905b82821061050c5750505084528181013590840152810135910152909150565b86828c031261017457848791825161052381610235565b843561052e8161018a565b815282850135838201528152019101906104ed565b9181601f84011215610174578235916001600160401b038311610174576020808501948460051b01011161017457565b81601f820112156101745780359061058a82610299565b92610598604051948561026b565b8284526020838301011161017457815f926020809301838601378301015290565b60e0366003190112610174576105cd61019b565b6001600160401b03602435818111610174576105ed90369060040161047f565b60443582811161017457610605903690600401610543565b60649291923584811161017457610620903690600401610543565b9160843586811161017457610639903690600401610543565b9590946106446101aa565b9760c4359081116101745761065d903690600401610573565b98610a5a565b60803660031901126101745760046001600160401b0381358181116101745761068f9036908401610543565b91602435818111610174576106a79036908601610543565b91604435908111610174576106bf9036908701610543565b949093606435966106cf8861018a565b6106d7610e20565b848314801590610783575b610774575f5b8381106106ff5750506106fa87610f30565b611146565b737777777f279eba3d3ad8f4e708545291a6fdba8b61073661072a610725848888610c1b565b610c30565b6001600160a01b031690565b14610743576001016106e8565b60405163d08525e960e01b8152737777777f279eba3d3ad8f4e708545291a6fdba8b81840190815281906020010390fd5b604051631dc0052360e11b8152fd5b50868514156106e2565b34610174575f36600319011261017457323303610843577f00000000000000000000000000000000000000000000000000000000000000018015610838575b610826576108006107fc7f000000000000000000000000b1081ceef40b5c04c93b3c8c211766332b7a1d7b611271565b1590565b61081457610421600160ff195f5416175f55565b6040516370a4078f60e01b8152600490fd5b604051630f45b98b60e41b8152600490fd5b505f5460ff166107cc565b60405163096650c560e21b8152600490fd5b346101745760a03660031901126101745761087160043561018a565b61087c60243561018a565b6001600160401b036044358181116101745761089c903690600401610543565b606492919235828111610174576108b7903690600401610543565b60849491943593841161017457610152946108d96108e19536906004016101b7565b949093610c5e565b6040516001600160e01b031990911681529081906020820190565b34610174575f3660031901126101745760206040517f4910260415865c6d3ecf96968c7d912a0d533a72c3479ab1e1df0f4eb86fb0088152f35b346101745760a03660031901126101745761095260043561018a565b61095d60243561018a565b6084356001600160401b0381116101745761097c9036906004016101b7565b90610985610dc9565b906001600160a01b0382161561017857333b15610174575f916109c56040519485938493637921219560e11b855260643590604435903060048801610d0f565b038183335af1801561016f576109e8575b60405163f23a6e6160e01b8152602090f35b806101636109f592610202565b5f6109d6565b908060209392818452848401375f828201840152601f01601f1916010190565b6001600160a01b039182168152911660208201526040810191909152608060608201819052610a4c939101916109fb565b90565b6040513d5f823e3d90fd5b909192939495969798610a6b610e20565b868514801590610bfd575b610beb57610a838a610f30565b8051610a92575b505050611146565b95919894909793604097939751976020986020810190610af981610aeb3385919091602060408201937f4910260415865c6d3ecf96968c7d912a0d533a72c3479ab1e1df0f4eb86fb008835260018060a01b0316910152565b03601f19810183528261026b565b519020610b078c5151610fb9565b9b5f5b81518051821015610b535790610b4c8f82908f80610b2a84600198611017565b510151610b3561028c565b30815291820152610b468383611017565b52611017565b5001610b0a565b505093979b909498919599509991959960018060a01b037f000000000000000000000000000000000022d473030f116ddee9f6b43ac78ba31691610b956102b4565b94833b1561017457610bc25f96928793604051998a988997889663fe8ec1a760e01b88526004880161107d565b03925af1801561016f57610bd8575b8080610a8a565b80610163610be592610202565b5f610bd1565b604051631dc0052360e11b8152600490fd5b5088871415610a76565b634e487b7160e01b5f52603260045260245ffd5b9190811015610c2b5760051b0190565b610c07565b35610a4c8161018a565b81835290916001600160fb1b0383116101745760209260051b809284830137010190565b94909290916001600160a01b03610c73610dc9565b1692831561017857333b15610174575f95610cd0610cdf94610cbc6040519a8b998a99631759616b60e11b8b523060048c015260248b015260a060448b015260a48a0191610c3a565b9060031995868984030160648a0152610c3a565b928584030160848601526109fb565b038183335af1801561016f57610cfc575b5063bc197c8160e01b90565b80610163610d0992610202565b5f610cf0565b9192610a4c96949160a094600180871b0380921685521660208401526040830152606082015281608082015201916109fb565b3d356366e0daa08160e01c14610d56573d3dfd5b193d5260043d815b809236821015610db1578135831a6001809301948115610d855750815301905b9091610d5e565b3d19835260020194607f9150353d1a81811115610da6575b16010190610d7e565b838101388439610d9d565b5f809181305af43d5f803e15610dc5573d5ff35b3d5ffd5b6002547f000000000000000000000000000000000000000000000000000000000000000380600414610e09576003036112ea575c6001600160a01b031690565b505f5460ff1615610e1a575c61072a565b5461072a565b600154805c6001600160a01b031680151580610e6f575b80610e65575b610e47575033905d565b6044906040519063200991eb60e21b82526004820152336024820152fd5b5030331415610e3d565b5033811415610e37565b5f6001545d565b915f8091610ed39360405195602087019263a9059cbb60e01b845260018060a01b038093166024890152604488015260448752610ebc87610250565b1694519082865af1610ecc611242565b9083611287565b8051908115159182610f0c575b5050610ee95750565b604051635274afe760e01b81526001600160a01b03919091166004820152602490fd5b81925090602091810103126101745760200151801590811503610174575f80610ee0565b6001600160a01b031680158015610faf575b610fac57308114610f94576002547f000000000000000000000000000000000000000000000000000000000000000180600214610f83576001036112ea575d565b505f5460ff1615610f91575d565b55565b604051630bc2c5df60e11b8152306004820152602490fd5b50565b5060018114610f42565b90610fc382610468565b604090610fd3604051918261026b565b8381528093610fe4601f1991610468565b01915f5b838110610ff55750505050565b602090825161100381610235565b5f8152825f81830152828601015201610fe8565b8051821015610c2b5760209160051b010190565b9081518082526020808093019301915f5b82811061104a575050505090565b909192938260408261107160019489516020809160018060a01b0381511684520151910152565b0195019392910161103c565b9491969593909660c086526101208601978051606060c08901528051809a526101408801996020809201915f5b82811061111b57505050506110e9610a4c989961110d9695949360408460206110fb96015160e08d015201516101008b015289820360208b015261102b565b6001600160a01b039094166040880152565b60608601528482036080860152610356565b9160a0818403910152610356565b835180516001600160a01b03168e52602090810151908e01526040909c019b928101926001016110aa565b9295939094861486861416156112355785926040966111b4575b5050505080611175575b5060205f526020525ff35b471561116a573381186001821402185f3881804785620186a0f161116a575f526073600b5360ff6020536016600b47f0156111b0575f61116a565b3838fd5b91939592839060051b9283868637838501935b82518701908681015f808435806020809701853783603f19808a8c010135908a8a0101355af11561122d578185523d90523d5f606083013e603f601f19913d0101169201958885881461121c575095916111c7565b9650505091505001925f8080611160565b3d5f803e3d5ffd5b633b800a463d526004601cfd5b3d1561126c573d9061125382610299565b91611261604051938461026b565b82523d5f602084013e565b606090565b5f80808093600a5a04fa611283611242565b5090565b906112ae575080511561129c57805190602001fd5b604051630a12f52160e11b8152600490fd5b815115806112e1575b6112bf575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b156112b7565b634e487b7160e01b5f52605160045260245ffdfea2646970667358221220d574a58d5716d3d5288d4efee2cae170aea7c9a03e95cfc9c4ad161cd26dc8f464736f6c63430008190033");

    internal byte[] Permit2DeployedBytecode => Bytes.FromHexString("0x6040608081526004908136101561001557600080fd5b600090813560e01c80630d58b1db1461126c578063137c29fe146110755780632a2d80d114610db75780632b67b57014610bde57806330f28b7a14610ade5780633644e51514610a9d57806336c7851614610a285780633ff9dcb1146109a85780634fe02b441461093f57806365d9723c146107ac57806387517c451461067a578063927da105146105c3578063cc53287f146104a3578063edd9444b1461033a5763fe8ec1a7146100c657600080fd5b346103365760c07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103365767ffffffffffffffff833581811161033257610114903690860161164b565b60243582811161032e5761012b903690870161161a565b6101336114e6565b9160843585811161032a5761014b9036908a016115c1565b98909560a43590811161032657610164913691016115c1565b969095815190610173826113ff565b606b82527f5065726d697442617463685769746e6573735472616e7366657246726f6d285460208301527f6f6b656e5065726d697373696f6e735b5d207065726d69747465642c61646472838301527f657373207370656e6465722c75696e74323536206e6f6e63652c75696e74323560608301527f3620646561646c696e652c000000000000000000000000000000000000000000608083015282519a8b9181610222602085018096611f93565b918237018a8152039961025b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09b8c8101835282611437565b5190209085515161026b81611ebb565b908a5b8181106102f95750506102f6999a6102ed9183516102a081610294602082018095611f66565b03848101835282611437565b519020602089810151858b015195519182019687526040820192909252336060820152608081019190915260a081019390935260643560c08401528260e081015b03908101835282611437565b51902093611cf7565b80f35b8061031161030b610321938c5161175e565b51612054565b61031b828661175e565b52611f0a565b61026e565b8880fd5b8780fd5b8480fd5b8380fd5b5080fd5b5091346103365760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103365767ffffffffffffffff9080358281116103325761038b903690830161164b565b60243583811161032e576103a2903690840161161a565b9390926103ad6114e6565b9160643590811161049f576103c4913691016115c1565b949093835151976103d489611ebb565b98885b81811061047d5750506102f697988151610425816103f9602082018095611f66565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282611437565b5190206020860151828701519083519260208401947ffcf35f5ac6a2c28868dc44c302166470266239195f02b0ee408334829333b7668652840152336060840152608083015260a082015260a081526102ed8161141b565b808b61031b8261049461030b61049a968d5161175e565b9261175e565b6103d7565b8680fd5b5082346105bf57602090817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103325780359067ffffffffffffffff821161032e576104f49136910161161a565b929091845b848110610504578580f35b8061051a610515600193888861196c565b61197c565b61052f84610529848a8a61196c565b0161197c565b3389528385528589209173ffffffffffffffffffffffffffffffffffffffff80911692838b528652868a20911690818a5285528589207fffffffffffffffffffffffff000000000000000000000000000000000000000081541690558551918252848201527f89b1add15eff56b3dfe299ad94e01f2b52fbcb80ae1a3baea6ae8c04cb2b98a4853392a2016104f9565b8280fd5b50346103365760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033657610676816105ff6114a0565b936106086114c3565b6106106114e6565b73ffffffffffffffffffffffffffffffffffffffff968716835260016020908152848420928816845291825283832090871683528152919020549251938316845260a083901c65ffffffffffff169084015260d09190911c604083015281906060820190565b0390f35b50346103365760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610336576106b26114a0565b906106bb6114c3565b916106c46114e6565b65ffffffffffff926064358481169081810361032a5779ffffffffffff0000000000000000000000000000000000000000947fda9fa7c1b00402c17d0161b249b1ab8bbec047c5a52207b9c112deffd817036b94338a5260016020527fffffffffffff0000000000000000000000000000000000000000000000000000858b209873ffffffffffffffffffffffffffffffffffffffff809416998a8d5260205283878d209b169a8b8d52602052868c209486156000146107a457504216925b8454921697889360a01b16911617179055815193845260208401523392a480f35b905092610783565b5082346105bf5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126105bf576107e56114a0565b906107ee6114c3565b9265ffffffffffff604435818116939084810361032a57338852602091600183528489209673ffffffffffffffffffffffffffffffffffffffff80911697888b528452858a20981697888a5283528489205460d01c93848711156109175761ffff9085840316116108f05750907f55eb90d810e1700b35a8e7e25395ff7f2b2259abd7415ca2284dfb1c246418f393929133895260018252838920878a528252838920888a5282528389209079ffffffffffffffffffffffffffffffffffffffffffffffffffff7fffffffffffff000000000000000000000000000000000000000000000000000083549260d01b16911617905582519485528401523392a480f35b84517f24d35a26000000000000000000000000000000000000000000000000000000008152fd5b5084517f756688fe000000000000000000000000000000000000000000000000000000008152fd5b503461033657807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610336578060209273ffffffffffffffffffffffffffffffffffffffff61098f6114a0565b1681528084528181206024358252845220549051908152f35b5082346105bf57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126105bf577f3704902f963766a4e561bbaab6e6cdc1b1dd12f6e9e99648da8843b3f46b918d90359160243533855284602052818520848652602052818520818154179055815193845260208401523392a280f35b8234610a9a5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610a9a57610a606114a0565b610a686114c3565b610a706114e6565b6064359173ffffffffffffffffffffffffffffffffffffffff8316830361032e576102f6936117a1565b80fd5b503461033657817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033657602090610ad7611b1e565b9051908152f35b508290346105bf576101007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126105bf57610b1a3661152a565b90807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7c36011261033257610b4c611478565b9160e43567ffffffffffffffff8111610bda576102f694610b6f913691016115c1565b939092610b7c8351612054565b6020840151828501519083519260208401947f939c21a48a8dbe3a9a2404a1d46691e4d39f6583d6ec6b35714604c986d801068652840152336060840152608083015260a082015260a08152610bd18161141b565b51902091611c25565b8580fd5b509134610336576101007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033657610c186114a0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc360160c08112610332576080855191610c51836113e3565b1261033257845190610c6282611398565b73ffffffffffffffffffffffffffffffffffffffff91602435838116810361049f578152604435838116810361049f57602082015265ffffffffffff606435818116810361032a5788830152608435908116810361049f576060820152815260a435938285168503610bda576020820194855260c4359087830182815260e43567ffffffffffffffff811161032657610cfe90369084016115c1565b929093804211610d88575050918591610d786102f6999a610d7e95610d238851611fbe565b90898c511690519083519260208401947ff3841cd1ff0085026a6327b620b67997ce40f282c88a8e905a7a5626e310f3d086528401526060830152608082015260808152610d70816113ff565b519020611bd9565b916120c7565b519251169161199d565b602492508a51917fcd21db4f000000000000000000000000000000000000000000000000000000008352820152fd5b5091346103365760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc93818536011261033257610df36114a0565b9260249081359267ffffffffffffffff9788851161032a578590853603011261049f578051978589018981108282111761104a578252848301358181116103265785019036602383011215610326578382013591610e50836115ef565b90610e5d85519283611437565b838252602093878584019160071b83010191368311611046578801905b828210610fe9575050508a526044610e93868801611509565b96838c01978852013594838b0191868352604435908111610fe557610ebb90369087016115c1565b959096804211610fba575050508998995151610ed681611ebb565b908b5b818110610f9757505092889492610d7892610f6497958351610f02816103f98682018095611f66565b5190209073ffffffffffffffffffffffffffffffffffffffff9a8b8b51169151928551948501957faf1b0d30d2cab0380e68f0689007e3254993c596f2fdd0aaa7f4d04f794408638752850152830152608082015260808152610d70816113ff565b51169082515192845b848110610f78578580f35b80610f918585610f8b600195875161175e565b5161199d565b01610f6d565b80610311610fac8e9f9e93610fb2945161175e565b51611fbe565b9b9a9b610ed9565b8551917fcd21db4f000000000000000000000000000000000000000000000000000000008352820152fd5b8a80fd5b6080823603126110465785608091885161100281611398565b61100b85611509565b8152611018838601611509565b838201526110278a8601611607565b8a8201528d611037818701611607565b90820152815201910190610e7a565b8c80fd5b84896041867f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b5082346105bf576101407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126105bf576110b03661152a565b91807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7c360112610332576110e2611478565b67ffffffffffffffff93906101043585811161049f5761110590369086016115c1565b90936101243596871161032a57611125610bd1966102f6983691016115c1565b969095825190611134826113ff565b606482527f5065726d69745769746e6573735472616e7366657246726f6d28546f6b656e5060208301527f65726d697373696f6e73207065726d69747465642c6164647265737320737065848301527f6e6465722c75696e74323536206e6f6e63652c75696e7432353620646561646c60608301527f696e652c0000000000000000000000000000000000000000000000000000000060808301528351948591816111e3602085018096611f93565b918237018b8152039361121c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe095868101835282611437565b5190209261122a8651612054565b6020878101518589015195519182019687526040820192909252336060820152608081019190915260a081019390935260e43560c08401528260e081016102e1565b5082346105bf576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033257813567ffffffffffffffff92838211610bda5736602383011215610bda5781013592831161032e576024906007368386831b8401011161049f57865b8581106112e5578780f35b80821b83019060807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc83360301126103265761139288876001946060835161132c81611398565b611368608461133c8d8601611509565b9485845261134c60448201611509565b809785015261135d60648201611509565b809885015201611509565b918291015273ffffffffffffffffffffffffffffffffffffffff80808093169516931691166117a1565b016112da565b6080810190811067ffffffffffffffff8211176113b457604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6060810190811067ffffffffffffffff8211176113b457604052565b60a0810190811067ffffffffffffffff8211176113b457604052565b60c0810190811067ffffffffffffffff8211176113b457604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176113b457604052565b60c4359073ffffffffffffffffffffffffffffffffffffffff8216820361149b57565b600080fd5b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361149b57565b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361149b57565b6044359073ffffffffffffffffffffffffffffffffffffffff8216820361149b57565b359073ffffffffffffffffffffffffffffffffffffffff8216820361149b57565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc01906080821261149b576040805190611563826113e3565b8082941261149b57805181810181811067ffffffffffffffff8211176113b457825260043573ffffffffffffffffffffffffffffffffffffffff8116810361149b578152602435602082015282526044356020830152606435910152565b9181601f8401121561149b5782359167ffffffffffffffff831161149b576020838186019501011161149b57565b67ffffffffffffffff81116113b45760051b60200190565b359065ffffffffffff8216820361149b57565b9181601f8401121561149b5782359167ffffffffffffffff831161149b576020808501948460061b01011161149b57565b91909160608184031261149b576040805191611666836113e3565b8294813567ffffffffffffffff9081811161149b57830182601f8201121561149b578035611693816115ef565b926116a087519485611437565b818452602094858086019360061b8501019381851161149b579086899897969594939201925b8484106116e3575050505050855280820135908501520135910152565b90919293949596978483031261149b578851908982019082821085831117611730578a928992845261171487611509565b81528287013583820152815201930191908897969594936116c6565b602460007f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b80518210156117725760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b92919273ffffffffffffffffffffffffffffffffffffffff604060008284168152600160205282828220961695868252602052818120338252602052209485549565ffffffffffff8760a01c16804211611884575082871696838803611812575b5050611810955016926118b5565b565b878484161160001461184f57602488604051907ff96fb0710000000000000000000000000000000000000000000000000000000082526004820152fd5b7fffffffffffffffffffffffff000000000000000000000000000000000000000084846118109a031691161790553880611802565b602490604051907fd81b2f2e0000000000000000000000000000000000000000000000000000000082526004820152fd5b9060006064926020958295604051947f23b872dd0000000000000000000000000000000000000000000000000000000086526004860152602485015260448401525af13d15601f3d116001600051141617161561190e57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c45440000000000000000000000006044820152fd5b91908110156117725760061b0190565b3573ffffffffffffffffffffffffffffffffffffffff8116810361149b5790565b9065ffffffffffff908160608401511673ffffffffffffffffffffffffffffffffffffffff908185511694826020820151169280866040809401511695169560009187835260016020528383208984526020528383209916988983526020528282209184835460d01c03611af5579185611ace94927fc6a377bfc4eb120024a8ac08eef205be16b817020812c73223e81d1bdb9708ec98979694508715600014611ad35779ffffffffffff00000000000000000000000000000000000000009042165b60a01b167fffffffffffff00000000000000000000000000000000000000000000000000006001860160d01b1617179055519384938491604091949373ffffffffffffffffffffffffffffffffffffffff606085019616845265ffffffffffff809216602085015216910152565b0390a4565b5079ffffffffffff000000000000000000000000000000000000000087611a60565b600484517f756688fe000000000000000000000000000000000000000000000000000000008152fd5b467f000000000000000000000000000000000000000000000000000000000000000103611b69577f866a5aba21966af95d6c7ab78eb2b2fc913915c28be3b9aa07cc04ff903e3f2890565b60405160208101907f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86682527f9ac997416e8ff9d2ff6bebeb7149f65cdae5e32e2b90440b566bb3044041d36a604082015246606082015230608082015260808152611bd3816113ff565b51902090565b611be1611b1e565b906040519060208201927f190100000000000000000000000000000000000000000000000000000000000084526022830152604282015260428152611bd381611398565b9192909360a435936040840151804211611cc65750602084510151808611611c955750918591610d78611c6594611c60602088015186611e47565b611bd9565b73ffffffffffffffffffffffffffffffffffffffff809151511692608435918216820361149b57611810936118b5565b602490604051907f3728b83d0000000000000000000000000000000000000000000000000000000082526004820152fd5b602490604051907fcd21db4f0000000000000000000000000000000000000000000000000000000082526004820152fd5b959093958051519560409283830151804211611e175750848803611dee57611d2e918691610d7860209b611c608d88015186611e47565b60005b868110611d42575050505050505050565b611d4d81835161175e565b5188611d5a83878a61196c565b01359089810151808311611dbe575091818888886001968596611d84575b50505050505001611d31565b611db395611dad9273ffffffffffffffffffffffffffffffffffffffff6105159351169561196c565b916118b5565b803888888883611d78565b6024908651907f3728b83d0000000000000000000000000000000000000000000000000000000082526004820152fd5b600484517fff633a38000000000000000000000000000000000000000000000000000000008152fd5b6024908551907fcd21db4f0000000000000000000000000000000000000000000000000000000082526004820152fd5b9073ffffffffffffffffffffffffffffffffffffffff600160ff83161b9216600052600060205260406000209060081c6000526020526040600020818154188091551615611e9157565b60046040517f756688fe000000000000000000000000000000000000000000000000000000008152fd5b90611ec5826115ef565b611ed26040519182611437565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0611f0082946115ef565b0190602036910137565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114611f375760010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b805160208092019160005b828110611f7f575050505090565b835185529381019392810192600101611f71565b9081519160005b838110611fab575050016000815290565b8060208092840101518185015201611f9a565b60405160208101917f65626cad6cb96493bf6f5ebea28756c966f023ab9e8a83a7101849d5573b3678835273ffffffffffffffffffffffffffffffffffffffff8082511660408401526020820151166060830152606065ffffffffffff9182604082015116608085015201511660a082015260a0815260c0810181811067ffffffffffffffff8211176113b45760405251902090565b6040516020808201927f618358ac3db8dc274f0cd8829da7e234bd48cd73c4a740aede1adec9846d06a1845273ffffffffffffffffffffffffffffffffffffffff81511660408401520151606082015260608152611bd381611398565b919082604091031261149b576020823592013590565b6000843b61222e5750604182036121ac576120e4828201826120b1565b939092604010156117725760209360009360ff6040608095013560f81c5b60405194855216868401526040830152606082015282805260015afa156121a05773ffffffffffffffffffffffffffffffffffffffff806000511691821561217657160361214c57565b60046040517f815e1d64000000000000000000000000000000000000000000000000000000008152fd5b60046040517f8baa579f000000000000000000000000000000000000000000000000000000008152fd5b6040513d6000823e3d90fd5b60408203612204576121c0918101906120b1565b91601b7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84169360ff1c019060ff8211611f375760209360009360ff608094612102565b60046040517f4be6321b000000000000000000000000000000000000000000000000000000008152fd5b929391601f928173ffffffffffffffffffffffffffffffffffffffff60646020957fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0604051988997889687947f1626ba7e000000000000000000000000000000000000000000000000000000009e8f8752600487015260406024870152816044870152868601378b85828601015201168101030192165afa9081156123a857829161232a575b507fffffffff000000000000000000000000000000000000000000000000000000009150160361230057565b60046040517fb0669cbc000000000000000000000000000000000000000000000000000000008152fd5b90506020813d82116123a0575b8161234460209383611437565b810103126103365751907fffffffff0000000000000000000000000000000000000000000000000000000082168203610a9a57507fffffffff0000000000000000000000000000000000000000000000000000000090386122d4565b3d9150612337565b6040513d84823e3d90fdfea164736f6c6343000811000a");
    private static readonly byte[] PermitMulticallSelector = Bytes.FromHexString("0x66b9ca7b");
    private static readonly byte[] DelegateCallMulticallSelector = Bytes.FromHexString("0x6e305f80");

}


