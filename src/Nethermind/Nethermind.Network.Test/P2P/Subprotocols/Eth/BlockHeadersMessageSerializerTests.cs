/*
 * Copyright (c) 2018 Demerzel Solutions Limited
 * This file is part of the Nethermind library.
 *
 * The Nethermind library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The Nethermind library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with the Nethermind. If not, see <http://www.gnu.org/licenses/>.
 */

using System;
using Nethermind.Core.Encoding;
using Nethermind.Core.Extensions;
using Nethermind.Core.Test.Builders;
using Nethermind.Network.P2P.Subprotocols.Eth;
using NUnit.Framework;

namespace Nethermind.Network.Test.P2P.Subprotocols.Eth
{
    [TestFixture]
    public class BlockHeadersMessageSerializerTests
    {
        [Test]
        public void Roundtrip()
        {
            BlockHeadersMessage message = new BlockHeadersMessage();
            message.BlockHeaders = new[] {Build.A.BlockHeader.TestObject};

            BlockHeadersMessageSerializer serializer = new BlockHeadersMessageSerializer();
            byte[] bytes = serializer.Serialize(message);
            byte[] expectedBytes = Bytes.FromHexString("f901fcf901f9a0ff483e972a04a9a62bb4b7d04ae403c615604e4090521ecc5bb7af67f71be09ca01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421bf424080833d090080830f424083010203a02ba5557a4c62a513c7e56d1bf13373e0da6bec016755483e91589fe1c6d212e28800000000000003e8");

            Assert.AreEqual(bytes.ToHexString(), expectedBytes.ToHexString(), "bytes");

            BlockHeadersMessage deserialized = serializer.Deserialize(bytes);
            Assert.AreEqual(message.BlockHeaders.Length, deserialized.BlockHeaders.Length, "length");
            Assert.AreEqual(message.BlockHeaders[0].Hash, deserialized.BlockHeaders[0].Hash, "hash");

            SerializerTester.Test(serializer, message);
            SerializerTester.TestZero(serializer, message);
        }
        
        [Test]
        public void Roundtrip_nulls()
        {
            BlockHeadersMessage message = new BlockHeadersMessage();
            message.BlockHeaders = new[] {Build.A.BlockHeader.TestObject, null};

            BlockHeadersMessageSerializer serializer = new BlockHeadersMessageSerializer();
            byte[] bytes = serializer.Serialize(message);

            BlockHeadersMessage deserialized = serializer.Deserialize(bytes);
            Assert.AreEqual(message.BlockHeaders.Length, deserialized.BlockHeaders.Length, "length");
            Assert.AreEqual(message.BlockHeaders[0].Hash, deserialized.BlockHeaders[0].Hash, "hash");
            Assert.Null(message.BlockHeaders[1]);

            SerializerTester.Test(serializer, message);
            SerializerTester.TestZero(serializer, message);
        }

        [Test]
        public void Can_decode_249_bloom()
        {
            Rlp rlp = new Rlp(Bytes.FromHexString(""));
            // f9 01 02 81 7f 0 0 0 ... 0
            // 249 -> 258 -> 129 127 0 0 0 ... 0 (strange?)
            BlockHeadersMessageSerializer serializer = new BlockHeadersMessageSerializer();
            BlockHeadersMessage message = serializer.Deserialize(rlp.Bytes);
            Assert.AreEqual(8, message.BlockHeaders.Length);
        }

        [Test]
        public void Throws_on_invalid_goerli_headers()
        {
            Rlp rlp1 = new Rlp(Bytes.FromHexString("f901d8f901d5a06c1b254ca0552790694760d5435bc4812ab1688c75ad078c9e813d1eb4139c80a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a0518af1940525e0b68d089416a0c79ff0f244c4c8f7d65c32f2581c6833bae7aca056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421bb2de837a120080845bf2a08883010203000102000102"));
            Rlp rlp2 = new Rlp(Bytes.FromHexString("f901e1f901daf901d5a06c1b254ca0552790694760d5435bc4812ab1688c75ad078c9e813d1eb4139c80a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a0518af1940525e0b68d089416a0c79ff0f244c4c8f7d65c32f2581c6833bae7aca056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421bb2de837a120080845bf2a08883010203000102000102c0c083010866"));
            // f9 01 02 81 7f 0 0 0 ... 0
            // 249 -> 258 -> 129 127 0 0 0 ... 0 (strange?)
            BlockHeadersMessageSerializer serializer = new BlockHeadersMessageSerializer();
            Assert.Throws<RlpException>(() => serializer.Deserialize(rlp1.Bytes));
            Assert.Throws<RlpException>(() => serializer.Deserialize(rlp2.Bytes));
        }
    }
}