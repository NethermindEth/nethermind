//  Copyright (c) 2018 Demerzel Solutions Limited
//  This file is part of the Nethermind library.
// 
//  The Nethermind library is free software: you can redistribute it and/or modify
//  it under the terms of the GNU Lesser General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
// 
//  The Nethermind library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU Lesser General Public License for more details.
// 
//  You should have received a copy of the GNU Lesser General Public License
//  along with the Nethermind. If not, see <http://www.gnu.org/licenses/>.

using Nethermind.Core.Crypto;
using Nethermind.Core.Extensions;
using Nethermind.Core.Test.Builders;
using Nethermind.Network.P2P.Subprotocols.Eth.V63;
using NUnit.Framework;

namespace Nethermind.Network.Test.P2P.Subprotocols.Eth.V63
{
    [Parallelizable(ParallelScope.Self)]
    [TestFixture]
    public class GetReceiptsMessageSerializerTests
    {
        private static void Test(Keccak[] keys)
        {
            GetReceiptsMessage message = new GetReceiptsMessage(keys);
            GetReceiptsMessageSerializer serializer = new GetReceiptsMessageSerializer();
            var serialized = serializer.Serialize(message);
            GetReceiptsMessage deserialized = serializer.Deserialize(serialized);

            Assert.AreEqual(keys.Length, deserialized.Hashes.Count, "count");
            for (int i = 0; i < keys.Length; i++) Assert.AreEqual(keys[i], deserialized.Hashes[i], $"blockHashes[{i}]");
        }

        [Test]
        public void Roundtrip()
        {
            Keccak[] hashes = {TestItem.KeccakA, TestItem.KeccakB, TestItem.KeccakC};
            Test(hashes);
        }

        [Test]
        public void Roundtrip_with_nulls()
        {
            Keccak[] hashes = {null, TestItem.KeccakA, null, TestItem.KeccakB, null, null};
            Test(hashes);
        }
        
        [Test]
        public void Roundtrip_example_from_network()
        { 
            byte[] bytes1 = Bytes.FromHexString("f8e7a0ccc8a764fbb24529fdb7d0b6144f4aa19fa5e8a52921b61e649312bdbcc5baf3a02f81d8850c9d554207de6e9f2ea17569f3ffac052c759c76a8619b611efad30aa0f9bc1af769997845815e4fac152fcb9b9544d806add15452b5ec45289512747ea026b807339bb8991ce39f8eb28417781d3984e9f9171dc954764f2a2a1a94fda8a0bd7a5373abf1c92e7445957612ab79aa3bd23cd463a4f8b2e9bc244fa2de5e3ba0d32cef2e48985fbb9973bd24038ec4cbe8afe83526509d67197c01c72208acbda03587a5c6e884b0c282521ed333cca786abcbba5e55328613ff5092559e66bc56");
            byte[] bytes2 = Bytes.FromHexString("");
            
            GetReceiptsMessageSerializer serializer = new GetReceiptsMessageSerializer();
            
            GetReceiptsMessage message = serializer.Deserialize(bytes1);
            byte[] serialized = serializer.Serialize(message);
            Assert.AreEqual(bytes1, serialized);
            
            GetReceiptsMessage message2 = serializer.Deserialize(bytes2);
            byte[] serialized2 = serializer.Serialize(message2);
            Assert.AreEqual(bytes2, serialized2);
        }
    }
}