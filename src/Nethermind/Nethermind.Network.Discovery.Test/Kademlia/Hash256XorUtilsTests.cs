// SPDX-FileCopyrightText: 2024 Demerzel Solutions Limited
// SPDX-License-Identifier: LGPL-3.0-only

using System;
using FluentAssertions;
using Nethermind.Core.Crypto;
using NUnit.Framework;

namespace Nethermind.Network.Discovery.Test.Kademlia;

public class Hash256XorUtilsTests
{

    [TestCase("0x0000000000000000000000000000000000000000000000000000000000000000",
              "0x0000000000000000000000000000000000000000000000000000000000000000",
              "0x0000000000000000000000000000000000000000000000000000000000000000", 0)]
    [TestCase("0x0000000000000000000000000000000000000000000000000000000000000000",
              "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
              "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", 256)]
    [TestCase("0x0000000000000000000000000000000000000000000000000000000000000000",
              "0xf000000000000000000000000000000000000000000000000000000000000000",
              "0xf000000000000000000000000000000000000000000000000000000000000000", 256)]
    [TestCase("0x0000000000000000000000000000000000000000000000000000000000000000",
              "0xe000000000000000000000000000000000000000000000000000000000000000",
              "0xe000000000000000000000000000000000000000000000000000000000000000", 256)]
    [TestCase("0x0000000000000000000000000000000000000000000000000000000000000000",
              "0x7000000000000000000000000000000000000000000000000000000000000000",
              "0x7000000000000000000000000000000000000000000000000000000000000000", 255)]
    [TestCase("0x0000000000000000000000000000000000000000000000000000000000000000",
              "0x0f00000000000000000000000000000000000000000000000000000000000000",
              "0x0f00000000000000000000000000000000000000000000000000000000000000", 252)]
    [TestCase("0x0000000000000000000000000000000000000000000000000000000000000000",
              "0x0e00000000000000000000000000000000000000000000000000000000000000",
              "0x0e00000000000000000000000000000000000000000000000000000000000000", 252)]
    [TestCase("0x0000000000000000000000000000000000000000000000000000000000000000",
              "0x0700000000000000000000000000000000000000000000000000000000000000",
              "0x0700000000000000000000000000000000000000000000000000000000000000", 251)]
    [TestCase("0x0000000000000000000000000000000000000000000000000000000000000000",
              "0x000e000000000000000000000000000000000000000000000000000000000000",
              "0x000e000000000000000000000000000000000000000000000000000000000000", 244)]
    [TestCase("0x0000000000000000000000000000000000000000000000000000000000000000",
              "0x000000000000000000000000000000000000000000000000000000000000000f",
              "0x000000000000000000000000000000000000000000000000000000000000000f", 4)]
    [TestCase("0x0000000000000000000000000000000000000000000000000000000000000000",
              "0x0000000000000000000000000000000000000000000000000000000000f0000f",
              "0x0000000000000000000000000000000000000000000000000000000000f0000f", 24)]
    [TestCase("0x0000000000000000000000000000000000000000000000000000000000000000",
              "0x00000000000000000000000000000000000000000000000000000000000f000f",
              "0x00000000000000000000000000000000000000000000000000000000000f000f", 20)]
    [TestCase("0x0000000000000000000000000000000000000000000000000000000000000000",
              "0x000000000000000000000000000000000000000000000000000000000001000f",
              "0x000000000000000000000000000000000000000000000000000000000001000f", 17)]
    public void TestDistance(string hash1, string hash2, string xosString, int expectedDistance)
    {
        ValueHash256 xor = ValueHash256.XorDistance(new ValueHash256(hash1), new ValueHash256(hash2));
        xor.ToString().Should().Be(xosString.ToLower());
        ValueHash256.CalculateLogDistance(new ValueHash256(hash1), new ValueHash256(hash2)).Should().Be(expectedDistance);
        ValueHash256.CalculateLogDistance(new ValueHash256(hash2), new ValueHash256(hash1)).Should().Be(expectedDistance);
    }

    [Test]
    public void TestGetRandomHash()
    {
        Random rand = new Random(0);
        ValueHash256 randomized = new ValueHash256();
        rand.NextBytes(randomized.BytesAsSpan);

        void TestForDistance(int distance)
        {
            var randHash = ValueHash256.GetRandomHashAtDistance(randomized, distance, rand);
            ValueHash256.CalculateLogDistance(randomized, randHash).Should().Be(distance);
        }

        for (int i = 1; i < 256; i++)
        {
            rand = new Random(0);
            for (int j = 0; j < 10; j++)
            {
                TestForDistance(i);
            }
        }

    }

    [TestCase]
    public void TestDistanceCompare()
    {
        ValueHash256 h1 = new ValueHash256("0x0010000000000000000000000000000000000000000000000000000000000000");
        ValueHash256 h2 = new ValueHash256("0x0110000000000000000000000000000000000000000000000000000000000000");
        ValueHash256 h3 = new ValueHash256("0x0000000000000000000000000000000000000000000000000000000000000000");

        ValueHash256.Compare(h1, h2, h3).Should().BeLessThan(0);
    }
}
