<?xml version="1.0" encoding="utf-8"?>

<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.nlog-project.org/schemas/NLog.xsd"
      autoReload="true" throwExceptions="false">

  <extensions>
    <add assembly="NLog.Targets.Seq" />
  </extensions>

  <targets async="true">
    <!-- beware - Nethermind code finds this target (file-async) to raplce the file name with a directory-prefixed one -->
    <target name="file-async" xsi:type="File"
            keepFileOpen="true"
            concurrentWrites="false"
            fileName="log.txt"
            archiveAboveSize="32000000"
            maxArchiveFiles="10"
            layout="${longdate}|${level:uppercase=true}|${threadid}|${message} ${exception:format=toString}" />
    <!--layout="${longdate}|${level:uppercase=true}|${threadid}|${logger}|${message} ${exception:format=toString}" />-->

    <target xsi:type="ColoredConsole"
            autoFlush="true"
            name="auto-colored-console-async"
            useDefaultRowHighlightingRules="false"
            layout="${longdate}|${message} ${exception:format=toString}">
      <!-- layout="${longdate}|${threadid}|${message} ${exception:format=toString}"> -->
      <highlight-row backgroundColor="NoChange" condition="level == LogLevel.Fatal" foregroundColor="Red" />
      <highlight-row backgroundColor="NoChange" condition="level == LogLevel.Error" foregroundColor="Red" />
      <highlight-row backgroundColor="NoChange" condition="level == LogLevel.Warn" foregroundColor="Yellow" />
      <highlight-row backgroundColor="NoChange" condition="level == LogLevel.Info" foregroundColor="Cyan" />
      <highlight-row backgroundColor="NoChange" condition="level == LogLevel.Debug" foregroundColor="Gray" />
      <highlight-row backgroundColor="NoChange" condition="level == LogLevel.Trace" foregroundColor="Magenta" />
    </target>

    <!-- note: you need to specify `Seq.MinLevel` or this target will be removed. `Seq.ServerUrl` will always replace url here. -->
    <target xsi:type="BufferingWrapper" name="seq" bufferSize="1000" flushTimeout="2000">
      <target xsi:type="Seq" serverUrl="http://localhost:5341" apiKey="">
        <property name="ThreadId" value="${threadid}" as="number" />
        <property name="MachineName" value="${machinename}" />
        <property name="Logger" value="${logger}" />
        <property name="Exception" value="${exception}" />
        <property name="Enode" value="${gdc:item=enode}" />
        <property name="Chain" value="${gdc:item=chain}" />
        <property name="ChainID" value="${gdc:item=chainId}" />
        <property name="Engine" value="${gdc:item=engine}" />
        <property name="NodeName" value="${gdc:item=nodeName}" />
        <property name="Version" value="${gdc:item=version}" />
      </target>
    </target>

    <target name="all" xsi:type="SplitGroup">
      <target-ref xsi:name="auto-colored-console-async" />
      <target-ref xsi:name="seq" />
      <target-ref xsi:name="file-async" />
    </target>
  </targets>

  <rules>
    <logger name="JsonWebAPI.Microsoft.Extensions.Diagnostics.HealthChecks.DefaultHealthCheckService" maxLevel="Error" final="true" />
    <!-- JsonWebAPI is an internal Kestrel logger for Json, not related to Ethereum JSON RPC -->
    <logger name="JsonWebAPI*" minlevel="Error" writeTo="file-async" />
    <logger name="JsonWebAPI*" minlevel="Error" writeTo="auto-colored-console-async" final="true" />
    <logger name="JsonWebAPI*" final="true" />

    <!--

    Sample config
    =============

    ## Only send to console
    <logger name="Merge.Plugin.PoSSwitcher" minlevel="Trace" writeTo="auto-colored-console-async" final="true" />

    ## Only send to seq
    <logger name="Merge.Plugin.PoSSwitcher" minlevel="Trace" writeTo="seq" final="true" />

    ## Only send to file
    <logger name="Merge.Plugin.PoSSwitcher" minlevel="Trace" writeTo="file-async" final="true" />

    ## Send to all three output
    <logger name="Merge.Plugin.PoSSwitcher" minlevel="Trace" writeTo="all" final="true" />

    ## In case you want to send to only two but not all three, skip the final attribute so that it will try the next rule
    <logger name="Merge.Plugin.PoSSwitcher" minlevel="Trace" writeTo="seq" />
    <logger name="Merge.Plugin.PoSSwitcher" minlevel="Trace" writeTo="file-async" final="true" />

    You can also use wilcards
    <logger name="Merge.Plugin.*" minlevel="Trace" writeTo="all" final="true" />

    -->


    <!-- <logger name="Merge.Plugin.Synchronization.*" minlevel="Trace" writeTo="all" final="true" /> -->

    <!-- <logger name="Synchronization.*" minlevel="Trace" writeTo="all" final="true" /> -->

    <!-- <logger name="Network.*" minlevel="Trace" writeTo="all" final="true" /> -->

    <!-- <logger name="Consensus.Validators.BlockValidator" minlevel="Trace" writeTo="all" final="true" /> -->

    <!-- <logger name="Consensus.Validators.HeaderValidator" minlevel="Trace" writeTo="all" final="true" /> -->

    <!-- big chance that you do not like the peers report - you can disable it here -->
    <!-- <logger name="Synchronization.Peers.SyncPeersReport" minlevel="Error" writeTo="all" final="true" /> -->

    <!-- <logger name="Blockchain.BlockTree" minlevel="Trace" writeTo="all" final="true" /> -->

    <!-- <logger name="Synchronization.Blocks.BlockDownloader" minlevel="Trace" writeTo="all" final="true" /> -->

    <!-- <logger name="Consensus.Processing.BlockchainProcessor" minlevel="Trace" writeTo="all" final="true" /> -->

    <!-- if sync get stuck this is the best thing to enable the Trace on -->
    <!-- <logger name="Synchronization.ParallelSync.MultiSyncModeSelector" minlevel="Trace" writeTo="all" final="true" /> -->

    <!-- if sync get stuck this is the best thing to enable the Trace on -->
    <!-- <logger name="Synchronization.SyncServer" minlevel="Trace" writeTo="all" final="true" /> -->

    <!-- <logger name="Network.*" minlevel="Trace" writeTo="all" final="true" /> -->

    <!-- for a detailed pruning analysis -->
    <!-- <logger name="Trie.*" minlevel="Trace" writeTo="all" final="true" /> -->

    <!-- for JsonRpc responses -->
    <!-- <logger name="JsonRpc.JsonRpcService" minlevel="Trace" writeTo="all" final="true" /> -->

    <!-- note: minLevel will get replaced by `Seq.MinLevel` -->
    <logger name="*" minlevel="Off" writeTo="seq" />
    <logger name="*" minlevel="Info" writeTo="file-async" />
    <logger name="*" minlevel="Info" writeTo="auto-colored-console-async" />
  </rules>
</nlog>
