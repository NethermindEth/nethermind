// SPDX-FileCopyrightText: 2022 Demerzel Solutions Limited
// SPDX-License-Identifier: LGPL-3.0-only

using System;
using BenchmarkDotNet.Attributes;
using Nethermind.Core;
using Nethermind.Core.Crypto;
using Nethermind.Core.Extensions;
using Nethermind.Core.Specs;
using Nethermind.Db;
using Nethermind.Evm.CodeAnalysis;
using Nethermind.Specs;
using Nethermind.Evm.Tracing;
using Nethermind.Int256;
using Nethermind.Logging;
using Nethermind.State;
using Nethermind.Trie.Pruning;
using Nethermind.Evm;

namespace Nethermind.Benchmark.Bytecode
{
    public class PrecompilesBytecodeBenchmark
    {
        public static byte[] ByteCode { get; set; }

        private IReleaseSpec _spec = MainnetSpecProvider.Instance.GetSpec((MainnetSpecProvider.GrayGlacierBlockNumber, MainnetSpecProvider.ShardingForkBlockTimestamp));
        private ITxTracer _txTracer = NullTxTracer.Instance;
        private ExecutionEnvironment _environment, _environmentBaseline;
        private IVirtualMachine _virtualMachine;
        private BlockHeader _header = new BlockHeader(Keccak.Zero, Keccak.Zero, Address.Zero, UInt256.One, MainnetSpecProvider.GrayGlacierBlockNumber, Int64.MaxValue, MainnetSpecProvider.ShardingForkBlockTimestamp, Bytes.Empty);
        private IBlockhashProvider _blockhashProvider = new TestBlockhashProvider();
        private EvmState _evmState, _evmStateBaseline;
        private StateProvider _stateProvider;
        private StorageProvider _storageProvider;
        private WorldState _worldState;

        [GlobalSetup]
        public void GlobalSetup()
        {
            //ByteCode = Bytes.FromHexString(Environment.GetEnvironmentVariable("NETH.BENCHMARK.BYTECODE") ?? string.Empty);
            //ByteCode = Bytes.FromHexString("620FFFFF600020");
            //ValidKey1 - 100478 ns
            //ByteCode = Bytes.FromHexString("7F18C547E4F7B0F325AD1E56F57E26C745B09A3E503D86E00E5255FF7F715D3D1C600052601C6020527F73B1693892219D736CABA55BDB67216E485557EA6B6AF75F37096C9AA6A5A75F6040527FEEB940B1D03B21E36B0E47E79769F095FE2AB855BD91E3A38756B7D75A9C45496060526028610200608060008060015AF1");
            //Bn256PairingBenchmark | input_param_scalar_8_gas_317000.csv | 317000 - 7599560 ns
            //ByteCode = Bytes.FromHexString("7F03D333C171B569F9721355F4B5F9569C18006D55EA805D0AB72F392E6E6BE88E6000527F230688A302D20E6934BC1151BF8A0AF65D4294568F5AF0B041197AAEC74AABEA6020527F1AAE25B6EDB4994684B2877875575B74C14A19EB068D429ACCD0BBBCD4DE1D116040527F0B2F112B63197FCAA10A2AFB08CD221BD509C829EFECDD4A3BADE00BF947CC396060527F11796BC946A8148CE73AA901E2E1F4DCB259B11EE880E088DDFF65F5F6F05D446080527F1AE8C9A28A7EE1D483DC47235E16E19303455EE1B7C6C29FDFF01D3EAB2C4E7760A0527F284E25E7B8203B7B40DBF1BFCDB4FBDEDEA474FD44ED67DAB27A031959453E9B60C0527E10ADB1D55C492437F0BAB7E1B63A56467681F06A29ACA6AB95D29D5FD23C3560E0527F29E107847478C3DD0AEB69D6C4345DD0239BA105A1BDDC699512E027BBB34B81610100527F111903892D003D32111610C7CCD4C529F75CC8BF33A894F40756510EC8B9BCFD610120527F0402B66E82C6B8FD6DE9652D5C81821F69445B0DCA7CD052E1811760803F778A610140527F1AE8318C37A3652BDCAB122282E95DD3F7393B3214E8CE290C01C9345CE81D1C610160527F09304EB9899BAA26AA963503F8A55ED2A5D0CC2D5D0FBDFAE81C3A823790D237610180527F1874CF1B2E447A896844C5338098F2AD9DEA545E40D5F5A4369125D95FCD5ACF6101A0527F0C0FFAFA0BA1C1053FDC155D63329F5D8540FE5C6A876793E04913A1E6A7C8886101C0527F15FE284D364A500612C376E7BD39A466E1B9C4C0A85B105D15A973DB33A0F1D46101E0527F2EE64373074312EC2147DAED5FBC660FF99664DCB993750AF8F192EE51B849A5610200527F1D9A24C4DBE4F69715D00E8EDE2F32C2A54C5E8F8A57487CF80DAD49915CDC18610220527F239B7847B2FE9C17F926AD11E5161802872B6607265D5BF10C737D9EB157506C610240527F05725034E5C2A941EFB693478B4401E684AFBA8AF20CFC14C53F66652C737AB7610260527F1657A4156FC5DC9DDF2B07D05C72395C7BB98F97743C6A81DCC11D25DCF31389610280527F0EFFB8DCEB430AE9009AFE11D1F00E0EC2CA627CE9C4919287A319590DFBA56D6102A0527F1D76F3288B570588497D0E5CC88341BA9B40B8FEE65F042836161D718EBBA1226102C0527F03BAB8927DB4E4B4DCF9CA7F4250C61D0A055985996D04E0C76D49BC83BAD37E6102E0527F0A1A1F642A16D95EADDFB9B7A403BDD032F07C9222813DF4DDA4AA3054716D76610300527F22A999AC90EAA7BBC4EC78BB5D47736AAF04F706DDCC4724776A5DC0BC39CD1A610320527F0C9C5FB89113F93DC81DB66C1CA13534F16518FB0347056C08BAC62A1BCD1B20610340527F1516A4F52FCA78D9D140D40687B093176EB90FB236C03CAD3EBF57027AFC1174610360527F2095F3A98A957815F7B13E263A5F11BCCEA9F6E716E219915E9075D9C0C2A8E0610380527F260E553A1182AA35B5D8D710C9705010E1350C02B6A217EC61245BEE22C850986103A0527F10027B242574EC29B652F249774D7320612DDE5CA36F20F42BB169352A568E4C6103C0527F14A972B4EF4A1CA49F0E4B095F77EC5929486D1A051ED3B766A40D442E8E7D3B6103E0527F04EBC527AEDCDD807D94774C23DBF3BF2841A2A0E3272E10431A056B1FB1224D610400527F16565B2F5350A0C8BCDCC6A3A2D189CC488C6C88CF9A0BD213248F73095F4AC0610420527F116D2A932043B527CB2A7C42E329A00310C9418DA803179A099418DDB9ED859B610440527F06035B9B8FA5EBDBCC460641E8AF2BD20E68E62D50563672A52294CC0E94CB33610460527F1287C3CC9C9B8F389DE88ED033CA26234D38089A712DFAC171B8C8D743C5A256610480527F0B1F5C5D64FB31D6830A6C982FC8DAAFCC6B2AC02AC20685E11CF211EDADF2BC6104A0527F01F9B7D3B716110DBFCDA9974D00A0E90721E9AAE490F3E0BA84B55CEFA949196104C0527F197EF9A4B21CCEF5186F0D9801A25CBB77227B2D8488FA8DA35E8C70495FB6866104E0527F1997575CFBBC644DAF21868564BE6A9FBFD216B252271F08FCE405355D84D490610500527F28F6C5397686E765C5157034C2ED2F92E2D11C7411613F5C60B5EE50540DF6FC610520527F025A3E1AEE7B30E3113AFCA04FA7E3949A54F65A25AA8241D5056F289C3378A7610540527F2D4730731A6659294DFE163718D63CC6239D09033BA48004C52A9D55D66317B6610560527F2493908D3215EFE3D2CB77FF6447A971599B2DF711A59395515C4CAC93A0F221610580527F1FADA2E1799EFD65247699FFBC3B35CCE7D210A61E868D3BD8ABB37E20BD5AFE6105A0527F2A628FFE54A17A274AF70C3584B4F9A2E567C6AE5D5A00D14AC7FFC12D04E06A6105C0527F03D1FEE23FA99C63FB8A760FE4794AF4221F7BB7CEB194C7DF2C63859C8B03296105E052602061062061060060008060085AF150");

            //PointEvaluationBenchmark | pointEvaluation1 | 50000 - 7599560 ns
            ByteCode = Bytes.FromHexString("7F013C03613F6FC558FB7E61E75602241ED9A2F04E36D8670AADD286E71B5CA9CC6000527F42000000000000000000000000000000000000000000000000000000000000006020527F31E5A2356CBC2EF6A733EAE8D54BF48719AE3D990017CA787C419C7D369F8E3C6040527F83FAC17C3F237FC51F90E2C660EB202A438BC2025BADED5CD193C1A018C5885B6060527FC9281BA704D5566082E851235C7BE763B2A99ADFF965E0A121EE972EBC472D026080527F944A74F5C6243E14052E105124B70BF65FAF85AD3A494325E269FAD097842CBA60A052602861020060C060008060145AF150");
            //PointEvaluationBenchmark | fuzzcorp-95 | 50000 - 7599560 ns
            //ByteCode = Bytes.FromHexString("7F103C03613F6FC558FB7E61E75602241ED9A2F04E36D8670AADD286E71B5CA9CC6000527F30303030303030303030303030303030303030303030303030303030303030306020527F30303030303030303030303030303030303030303030303030303030303030306040527F83FAC17C3F237FC51F90E2C660EB202A438BC2025BADED5CD193C1A018C5885B6060527FC9281BA704D5566082E851235C7BE763B2373831383030325A303032303030376080527F303130303730413037313130303131303030313237303830303930303030303260A052602861020060C060008060145AF150");
            //PointEvaluationBenchmark | fuzzcorp-33 | 50000 - 7599560 ns
            //ByteCode = Bytes.FromHexString("7F013C03613F6FC558FB7E61E75602241ED9A2F04E36D8670AADD286E71B5CA9CC6000527F30303030303030303030303030303030303030303030303030303030303030306020527F30303030303030303030303030303030303030303030303030303030303030306040527F83FAC17C3F237FC51F90E2C660EB202A438BC2025BADED5CD193C1A018C5885B6060527FC9281BA704D5566082E851235C7BE763B2373831383030320237ADED5CD127306080527F303230373030303130303730413037313130303131303030313237313830303960A052602861020060C060008060145AF1");
            Console.WriteLine($"Running benchmark for bytecode {ByteCode?.ToHexString()}");

            TrieStore trieStore = new(new MemDb(), new OneLoggerLogManager(NullLogger.Instance));
            IKeyValueStore codeDb = new MemDb();

            _stateProvider = new StateProvider(trieStore, codeDb, new OneLoggerLogManager(NullLogger.Instance));
            _stateProvider.CreateAccount(Address.Zero, 1000.Ether());
            _stateProvider.Commit(_spec);

            _storageProvider = new StorageProvider(trieStore, _stateProvider, new OneLoggerLogManager(NullLogger.Instance));

            _worldState = new WorldState(_stateProvider, _storageProvider);

            _virtualMachine = new VirtualMachine(_blockhashProvider, MainnetSpecProvider.Instance, new OneLoggerLogManager(NullLogger.Instance));

            _environment = new ExecutionEnvironment
            {
                ExecutingAccount = Address.Zero,
                CodeSource = Address.Zero,
                Caller = Address.Zero,
                CodeInfo = new CodeInfo(ByteCode),
                Value = 0,
                TransferValue = 0,
                TxExecutionContext = new TxExecutionContext(_header, Address.Zero, 0, Array.Empty<byte[]>())
            };

            _environmentBaseline = new ExecutionEnvironment
            {
                ExecutingAccount = Address.Zero,
                CodeSource = Address.Zero,
                Caller = Address.Zero,
                CodeInfo = new CodeInfo(Bytes.FromHexString("00")), // immediate exit
                Value = 0,
                TransferValue = 0,
                TxExecutionContext = new TxExecutionContext(_header, Address.Zero, 0, Array.Empty<byte[]>())
            };
        }

        [IterationSetup]
        public void Setup()
        {
            _evmState = new EvmState(long.MaxValue, _environment, ExecutionType.Transaction, true, _worldState.TakeSnapshot(), false);
            _evmStateBaseline = new EvmState(long.MaxValue, _environmentBaseline, ExecutionType.Transaction, true, _worldState.TakeSnapshot(), false);
        }

        [Benchmark]
        public void ExecuteCode()
        {
            var ts = _virtualMachine.Run(_evmState, _worldState, _txTracer);
            if (ts.IsError)
            {
                throw new Exception("Execution failed:" + ts.Error);
            }
        }

        //[Benchmark(Baseline = true)]
        //public void No_machine_running()
        //{
        //    _virtualMachine.Run(_evmStateBaseline, _worldState, _txTracer);
        //}

        [IterationCleanup]
        public void Cleanup()
        {
            _stateProvider.Reset();
            _storageProvider.Reset();
        }
    }
}
