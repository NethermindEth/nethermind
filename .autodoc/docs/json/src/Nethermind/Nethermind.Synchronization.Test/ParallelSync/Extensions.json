{
  "fileName": "Extensions.cs",
  "filePath": "src/Nethermind/Nethermind.Synchronization.Test/ParallelSync/Extensions.cs",
  "url": "https://github.com/NethermindEth/nethermind/src/Nethermind/Nethermind.Synchronization.Test/ParallelSync/Extensions.cs",
  "summary": "The code in this file provides extension methods for the `FastBlocksState` and `ISyncProgressResolver` classes, which are used in the larger Nethermind project for parallel synchronization of blockchain data. \n\nThe `FastBlocksState` class is an enumeration that represents the state of fast block synchronization, which is a process that allows nodes to quickly synchronize with the blockchain by downloading only the most recent blocks. The `SyncMode` enum is used to specify the synchronization mode, which can be either fast headers, fast bodies, fast receipts, or none. \n\nThe `GetSyncMode` extension method takes a `FastBlocksState` object and an optional boolean flag indicating whether the sync is full or partial, and returns the corresponding `SyncMode` value based on the state. If the state is `None`, the method returns `SyncMode.FastHeaders`. If the state is `FinishedHeaders`, the method returns `SyncMode.FastBodies` if the sync is full, or `SyncMode.None` if it is partial. If the state is `FinishedBodies`, the method returns `SyncMode.FastReceipts` if the sync is full, or `SyncMode.None` if it is partial. Otherwise, the method returns `SyncMode.None`. \n\nThe `ISyncProgressResolver` interface is used to resolve the synchronization progress of a node. The `IsFastBlocksFinished` extension method returns a new `FastBlocksFinishedState` object, which is used to set the state of fast block synchronization based on the progress resolver. The `FastBlocksFinishedState` class has a `Returns` method that takes a `FastBlocksState` object and sets the state of fast block headers, bodies, and receipts based on the value of the object. \n\nOverall, these extension methods provide a convenient way to determine the synchronization mode and set the state of fast block synchronization based on the progress resolver. They are likely used in other parts of the Nethermind project that involve parallel synchronization of blockchain data. \n\nExample usage:\n\n```\nFastBlocksState state = FastBlocksState.FinishedHeaders;\nbool isFullSync = true;\nSyncMode syncMode = state.GetSyncMode(isFullSync);\n// syncMode is SyncMode.FastBodies\n\nISyncProgressResolver syncProgressResolver = Substitute.For<ISyncProgressResolver>();\nExtensions.FastBlocksFinishedState fastBlocksFinishedState = syncProgressResolver.IsFastBlocksFinished();\nfastBlocksFinishedState.Returns(FastBlocksState.FinishedBodies);\n// fast block headers are finished, fast block bodies are finished, fast block receipts are not finished\n```",
  "questions": "1. What is the purpose of the `FastBlocksFinishedState` class?\n- The `FastBlocksFinishedState` class is used to set up the `ISyncProgressResolver` to return the appropriate `FastBlocksState` based on the current state of the synchronization process.\n\n2. What is the significance of the `SyncMode` enum?\n- The `SyncMode` enum is used to specify the synchronization mode, which can be either `FastHeaders`, `FastBodies`, `FastReceipts`, or `None`.\n\n3. What is the purpose of the `GetSyncMode` method?\n- The `GetSyncMode` method is used to determine the appropriate synchronization mode based on the current state of the `FastBlocksState` and whether or not it is a full sync."
}