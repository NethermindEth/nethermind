{
  "fileName": "ReportingContractBasedValidator.PersistentReports.cs",
  "filePath": "src/Nethermind/Nethermind.Consensus.AuRa/Validators/ReportingContractBasedValidator.PersistentReports.cs",
  "url": "https://github.com/NethermindEth/nethermind/src/Nethermind/Nethermind.Consensus.AuRa/Validators/ReportingContractBasedValidator.PersistentReports.cs",
  "summary": "The `ReportingContractBasedValidator` class is a validator implementation for the AuRa consensus protocol used in the Nethermind blockchain client. This class implements the `ITxSource` interface, which defines a method for getting transactions to include in a new block. The purpose of this class is to provide a way for validators to report malicious behavior by other validators, and to include these reports in new blocks.\n\nThe class has several internal constants that define the maximum number of reports to keep queued, the maximum number of malice reports to include when creating a new block, and the number of blocks to skip before retrying to send malice reports. It also has a private field `_persistentReports`, which is a linked list of `PersistentReport` objects. These objects represent reports of malicious behavior that have been persisted to storage.\n\nThe `GetTransactions` method is called by the block sealing process to get transactions to include in a new block. This method first calls the `GetTransactions` method of the `_contractValidator` field, which is an instance of the `ContractBasedValidator` class. This method returns transactions that are generated by the validator contract. The method then checks if the current block number is greater than the number of the last block in which malice reports were sent plus the number of blocks to skip before retrying. If this condition is true, the method calls the `GetPersistentReportsTransactions` method to get transactions for any persisted malice reports that have not been sent yet.\n\nThe `GetPersistentReportsTransactions` method returns a sequence of transactions for persisted malice reports. For each `PersistentReport` object in the `_persistentReports` linked list, the method checks if the block number of the report plus the number of blocks to skip before retrying is less than the current block number. If this condition is true, the method returns a transaction that reports the malicious behavior of the validator associated with the report.\n\nThe `ResendPersistedReports` method is called when a new block is sealed to resend any persisted malice reports that have not been sent yet. The method first checks if the current block number is a PoS block. If it is not, the method does nothing. If it is, the method calls the `FilterReports` method to remove any reports that are no longer valid. The method then calls the `TruncateReports` method to remove any excess reports that exceed the maximum number of queued reports. Finally, the method sends a transaction for each remaining report using the `SendTransaction` method.\n\nThe `FilterReports` method removes any reports that are no longer valid. For each `PersistentReport` object in the `_persistentReports` linked list, the method checks if the validator contract indicates that the report is still valid. If the report is no longer valid, the method removes the report from the linked list.\n\nThe `TruncateReports` method removes any excess reports that exceed the maximum number of queued reports. If the number of reports in the linked list exceeds the maximum number of queued reports, the method removes the oldest reports from the linked list until the number of reports is less than or equal to the maximum number of queued reports.\n\nThe `PersistentReport` class is a private class that represents a report of malicious behavior that has been persisted to storage. The class has three properties: `MaliciousValidator`, which is the address of the validator that is being reported; `BlockNumber`, which is the block number in which the malicious behavior occurred; and `Proof`, which is a byte array that contains proof of the malicious behavior.\n\nIn summary, the `ReportingContractBasedValidator` class provides a way for validators to report malicious behavior by other validators, and to include these reports in new blocks. The class uses a linked list to store persisted malice reports, and provides methods for filtering and truncating the list. The class also implements the `ITxSource` interface to provide a way to get transactions to include in a new block.",
  "questions": "1. What is the purpose of the `ReportingContractBasedValidator` class?\n- The `ReportingContractBasedValidator` class is a partial class that implements the `ITxSource` interface and contains methods for getting transactions and resending persisted reports.\n\n2. What is the significance of the `MaxQueuedReports` and `MaxReportsPerBlock` constants?\n- `MaxQueuedReports` is the maximum number of reports to keep queued, while `MaxReportsPerBlock` is the maximum number of malice reports to include when creating a new block.\n\n3. What is the purpose of the `FilterReports` method?\n- The `FilterReports` method removes reports of malicious validators that should not be included in the cache based on the parent block and the validator's address and block number."
}