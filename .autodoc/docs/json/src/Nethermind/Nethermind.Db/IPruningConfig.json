{
  "fileName": "IPruningConfig.cs",
  "filePath": "src/Nethermind/Nethermind.Db/IPruningConfig.cs",
  "url": "https://github.com/NethermindEth/nethermind/src/Nethermind/Nethermind.Db/IPruningConfig.cs",
  "summary": "The code defines an interface called `IPruningConfig` that is used to configure the pruning parameters for the Nethermind project. Pruning is the process of removing some of the intermediary state nodes, which saves disk space but makes most of the historical state queries fail. The interface has several properties that can be used to configure the pruning mode, cache size, persistence interval, full pruning threshold, and trigger, among others.\n\nThe `Enabled` property is obsolete and should not be used. Instead, the `Mode` property should be used to set the pruning mode. The possible values for `Mode` are 'None', 'Memory', 'Full', and 'Hybrid'. The `CacheMb` property sets the pruning cache size in MB, which is the amount of historical nodes data to store in cache. The bigger the cache, the bigger the disk space savings. The `PersistenceInterval` property defines how often blocks will be persisted even if not required by cache memory usage. The bigger the value, the bigger the disk space savings.\n\nThe `FullPruningThresholdMb` property defines the threshold in MB to trigger full pruning, depending on the `Mode` and `FullPruningTrigger`. The `FullPruningTrigger` property defines the trigger for full pruning. Either the size of StateDB or free space left on the volume where StateDB is located can be configured as auto triggers. The possible values for `FullPruningTrigger` are 'Manual', 'StateDbSize', and 'VolumeFreeSpace'. The `FullPruningMaxDegreeOfParallelism` property defines how many parallel tasks and potentially used threads can be created by full pruning. The recommended value depends on the type of the node. If the node needs to be responsive (its RPC or Validator node), then the recommended value is below the number of logical processors. If the node doesn't have much other responsibilities but needs to be reliably able to follow the chain without any delays and produce live logs, the default value is recommended. If the node doesn't have to be responsive, has very fast I/O (like NVME), and the shortest pruning time is to be achieved, this can be set to 2-3x of the number of logical processors.\n\nThe `FullPruningMemoryBudgetMb` property sets the memory budget used for the trie visit. Increasing this significantly reduces read IOPS requirement at the expense of RAM. The default value depends on the network. Set to 0 to disable. The `FullPruningMinimumDelayHours` property sets the minimum delay between allowed full pruning operations to avoid exhausting disk writes. The `FullPruningCompletionBehavior` property determines what to do after Nethermind completes a full prune. The possible values are 'None', 'ShutdownOnSuccess', and 'AlwaysShutdown'. 'None' does not take any special action. 'ShutdownOnSuccess' shuts Nethermind down if the full prune succeeded. 'AlwaysShutdown' shuts Nethermind down once the prune completes, whether it succeeded or failed.\n\nOverall, this code is an important part of the Nethermind project as it allows users to configure the pruning parameters to optimize disk space savings and performance. The properties defined in the interface can be used to fine-tune the pruning process to suit the specific needs of the user.",
  "questions": "1. What is the purpose of the `IPruningConfig` interface?\n- The `IPruningConfig` interface is used to configure the pruning parameters for the Nethermind project, which involves removing some of the intermediary state nodes to save disk space.\n\n2. What is the difference between the `CacheMb` and `PersistenceInterval` properties?\n- The `CacheMb` property sets the pruning cache size in MB, while the `PersistenceInterval` property defines how often blocks will be persisted even if not required by cache memory usage.\n\n3. What is the recommended value for `FullPruningMaxDegreeOfParallelism`?\n- The recommended value for `FullPruningMaxDegreeOfParallelism` depends on the type of node being used. If the node needs to be responsive, the recommended value is below the number of logical processors. If the node doesn't have much other responsibilities but needs to be reliably able to follow the chain without any delays and produce live logs, the default value is recommended. If the node doesn't have to be responsive, has very fast I/O, and the shortest pruning time is to be achieved, this can be set to 2-3x of the number of logical processors."
}