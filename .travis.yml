language: csharp
mono: none
sudo: required
dist: bionic
dotnet: 3.0.100
env:
  NETHERMIND_TEST_PROJECTS="[Nethermind.HashLib]*%2c[Nethermind.Core.Test]*%2c[Nethermind.Blockchain.Test]*%2c[Nethermind.DataMarketplace.Test]*"
  ETHEREUM_TEST_PROJECTS="[Nethermind.HashLib]*%2c[Nethermind.Core.Test]*%2c[Nethermind.Blockchain.Test]*%2c[Ethereum.Test.Base]*"
git:
  depth: false
  submodules: false
before_script:
  - chmod -R +x scripts
  - dotnet tool restore
notifications:
  slack:
    rooms:
      - demerzelsolutions:hzD3lmq2hbUgHuLFxjCOvk6x#team
      - demerzelsolutions:hzD3lmq2hbUgHuLFxjCOvk6x#general
after_success:
  - bash <(curl -s https://codecov.io/bash)
jobs:
  include:
    # - script: dotnet test -c Release src/Nethermind/Ethereum.VM.Test
    #  name: "Ethereum.VM.Test"
    - stage: Nethermind Tests    
      script: 
      - git submodule update --init src/Dirichlet
      - if [ $TRAVIS_PULL_REQUEST != false ] || [ $TRAVIS_BRANCH == "master" ]; then
          dotnet test -c Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude=$NETHERMIND_TEST_PROJECTS src/Nethermind/Nethermind.Abi.Test;
        else 
          dotnet test -c Release src/Nethermind/Nethermind.Abi.Test;
        fi
      name: "Nethermind.Abi.Test"
    - script: 
      - git submodule update --init src/Dirichlet
      - if [ $TRAVIS_PULL_REQUEST != false ] || [ $TRAVIS_BRANCH == "master" ]; then
          dotnet test -c Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude=$NETHERMIND_TEST_PROJECTS src/Nethermind/Nethermind.AuRa.Test;
        else 
          dotnet test -c Release src/Nethermind/Nethermind.AuRa.Test; 
        fi
      name: "Nethermind.AuRa.Test"
    - script: 
      - git submodule update --init src/Dirichlet
      - if [ $TRAVIS_PULL_REQUEST != false ] || [ $TRAVIS_BRANCH == "master" ]; then
          dotnet test -c Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude=$NETHERMIND_TEST_PROJECTS src/Nethermind/Nethermind.BeaconNode.Test;
        else 
          dotnet test -c Release src/Nethermind/Nethermind.BeaconNode.Test; 
        fi
      name: "Nethermind.BeaconNode.Test"  
    - script: 
      - git submodule update --init src/Dirichlet
      - if [ $TRAVIS_PULL_REQUEST != false ] || [ $TRAVIS_BRANCH == "master" ]; then
          dotnet test -c Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude=$NETHERMIND_TEST_PROJECTS src/Nethermind/Nethermind.Blockchain.Test;
        else 
          dotnet test -c Release src/Nethermind/Nethermind.Blockchain.Test; 
        fi
      name: "Nethermind.Blockchain.Test"    
    - script: 
      - git submodule update --init src/Dirichlet
      - if [ $TRAVIS_PULL_REQUEST != false ] || [ $TRAVIS_BRANCH == "master" ]; then
          dotnet test -c Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude=$NETHERMIND_TEST_PROJECTS src/Nethermind/Nethermind.Bls.Test;
        else 
          dotnet test -c Release src/Nethermind/Nethermind.Bls.Test; 
        fi
      name: "Nethermind.Bls.Test"    
    - script: 
      - git submodule update --init src/Dirichlet
      - if [ $TRAVIS_PULL_REQUEST != false ] || [ $TRAVIS_BRANCH == "master" ]; then
          dotnet test -c Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude=$NETHERMIND_TEST_PROJECTS src/Nethermind/Nethermind.Cli.Test;
        else 
          dotnet test -c Release src/Nethermind/Nethermind.Cli.Test;
        fi
      name: "Nethermind.Cli.Test"
    - script: 
      - git submodule update --init src/Dirichlet
      - if [ $TRAVIS_PULL_REQUEST != false ] || [ $TRAVIS_BRANCH == "master" ]; then
          dotnet test -c Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude=$NETHERMIND_TEST_PROJECTS src/Nethermind/Nethermind.Clique.Test;
        else 
          dotnet test -c Release src/Nethermind/Nethermind.Clique.Test;
        fi
      name: "Nethermind.Clique.Test"
    - script:
      - git submodule update --init src/Dirichlet
      - if [ $TRAVIS_PULL_REQUEST != false ] || [ $TRAVIS_BRANCH == "master" ]; then
          dotnet test -c Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude=$NETHERMIND_TEST_PROJECTS src/Nethermind/Nethermind.Config.Test;
        else 
          dotnet test -c Release src/Nethermind/Nethermind.Config.Test;
        fi
      name: "Nethermind.Config.Test"
    - script: 
      - git submodule update --init src/Dirichlet
      - if [ $TRAVIS_PULL_REQUEST != false ] || [ $TRAVIS_BRANCH == "master" ]; then
          dotnet test -c Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude=$NETHERMIND_TEST_PROJECTS src/Nethermind/Nethermind.Core.Test;
        else 
          dotnet test -c Release src/Nethermind/Nethermind.Core.Test;
        fi
      name: "Nethermind.Core.Test"
    #- script: dotnet test -c Release src/Nethermind/Nethermind.Db.Test
    #  name: "Nethermind.Db.Test.Linux"
    #- script: dotnet test -c Release src/Nethermind/Nethermind.Db.Test
    #  name: "Nethermind.Db.Test.Osx"
    #  os: osx
    - script: 
      - git submodule update --init src/Dirichlet
      - if [ $TRAVIS_PULL_REQUEST != false ] || [ $TRAVIS_BRANCH == "master" ]; then
          dotnet test -c Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude=$NETHERMIND_TEST_PROJECTS src/Nethermind/Nethermind.Evm.Test;
        else 
          dotnet test -c Release src/Nethermind/Nethermind.Evm.Test;
        fi
      name: "Nethermind.Evm.Test"
    - script: 
      - git submodule update --init src/Dirichlet
      - if [ $TRAVIS_PULL_REQUEST != false ] || [ $TRAVIS_BRANCH == "master" ]; then
          dotnet test -c Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude=$NETHERMIND_TEST_PROJECTS src/Nethermind/Nethermind.Facade.Test;
        else 
          dotnet test -c Release src/Nethermind/Nethermind.Evm.Test;
        fi
      name: "Nethermind.Facade.Test"
    - script:
      - git submodule update --init src/Dirichlet
      - if [ $TRAVIS_PULL_REQUEST != false ] || [ $TRAVIS_BRANCH == "master" ]; then
          dotnet test -c Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude=$NETHERMIND_TEST_PROJECTS src/Nethermind/Nethermind.JsonRpc.Test;
        else 
          dotnet test -c Release src/Nethermind/Nethermind.JsonRpc.Test;
        fi
      name: "Nethermind.JsonRpc.Test"
    - script:
      - if [ $TRAVIS_PULL_REQUEST != false ] || [ $TRAVIS_BRANCH == "master" ]; then
          dotnet test -c Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude=$NETHERMIND_TEST_PROJECTS src/Nethermind/Nethermind.Logging.NLog.Test;
        else 
          dotnet test -c Release src/Nethermind/Nethermind.Logging.NLog.Test;
        fi
      name: "Nethermind.Logging.NLog.Test"
    #- script: dotnet test -c Release src/Nethermind/Nethermind.KeyStore.Test
    #  name: "Nethermind.KeyStore.Test"
    - script:
      - git submodule update --init src/Dirichlet
      - if [ $TRAVIS_PULL_REQUEST != false ] || [ $TRAVIS_BRANCH == "master" ]; then
          dotnet test -c Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude=$NETHERMIND_TEST_PROJECTS src/Nethermind/Nethermind.Mining.Test;
        else 
          dotnet test -c Release src/Nethermind/Nethermind.Mining.Test;
        fi
      name: "Nethermind.Mining.Test"
    - script:
      - git submodule update --init src/Dirichlet
      - sudo apt-get install libsnappy-dev 
      - if [ $TRAVIS_PULL_REQUEST != false ] || [ $TRAVIS_BRANCH == "master" ]; then
          dotnet test -c Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude=$NETHERMIND_TEST_PROJECTS src/Nethermind/Nethermind.Network.Test;
        else 
          dotnet test -c Release src/Nethermind/Nethermind.Network.Test;
        fi
      name: "Nethermind.Network.Test"
    - script:
      - git submodule update --init src/Dirichlet
      - if [ $TRAVIS_PULL_REQUEST != false ] || [ $TRAVIS_BRANCH == "master" ]; then
          dotnet test -c Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude=$NETHERMIND_TEST_PROJECTS src/Nethermind/Nethermind.Secp256k1.Test;
        else 
          dotnet test -c Release src/Nethermind/Nethermind.Secp256k1.Test;
        fi
      name: "Nethermind.Secp256k1.Test.Linux"
    #- script: dotnet test -c Release src/Nethermind/Nethermind.Secp256k1.Test
    #  name: "Nethermind.Secp256k1.Test.Osx"
    #  os: osx
    # - script: dotnet test -c Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude="[Nethermind.HashLib]*" src/Nethermind/Nethermind.DataMarketplace.Consumers.Test
    #  name: "Nethermind.DataMarketplace.Consumers.Test"
    #- script: dotnet test -c Release /p:CollectCNethermind.Network.TesttFormat=opencover /p:Exclude="[Nethermind.HashLib]*" src/Nethermind/Nethermind.DatNethermind.Network.Test
    #  name: "Nethermind.DataMarketplaNethermind.Network.Test"
    #- script: dotnet test -c Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude="[Nethermind.HashLib]*%2c[Nethermind.Blockchain.Test]*" src/Nethermind/Nethermind.DataMarketplace.Test
    #  name: "Nethermind.DataMarketplace.Test"
    - script: 
      - git submodule update --init src/Dirichlet src/rocksdb-sharp
      - if [ $TRAVIS_PULL_REQUEST != false ] || [ $TRAVIS_BRANCH == "master" ]; then
          dotnet test -c Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude=$NETHERMIND_TEST_PROJECTS src/Nethermind/Nethermind.Runner.Test;
        else 
          dotnet test -c Release src/Nethermind/Nethermind.Runner.Test;
        fi
      name: "Nethermind.Runner.Test"
    - script: 
      - git submodule update --init src/Dirichlet
      - if [ $TRAVIS_PULL_REQUEST != false ] || [ $TRAVIS_BRANCH == "master" ]; then
          dotnet test -c Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude=$NETHERMIND_TEST_PROJECTS src/Nethermind/Nethermind.Ssz.Test;
        else 
          dotnet test -c Release src/Nethermind/Nethermind.Ssz.Test;
        fi
      name: "Nethermind.Ssz.Test"
    - script: 
      - git submodule update --init src/Dirichlet
      - if [ $TRAVIS_PULL_REQUEST != false ] || [ $TRAVIS_BRANCH == "master" ]; then
          dotnet test -c Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude=$NETHERMIND_TEST_PROJECTS src/Nethermind/Nethermind.Core2.Test;
        else 
          dotnet test -c Release src/Nethermind/Nethermind.Core2.Test;
        fi
      name: "Nethermind.Core2.Test"
    - script: 
      - git submodule update --init src/Dirichlet
      - if [ $TRAVIS_PULL_REQUEST != false ] || [ $TRAVIS_BRANCH == "master" ]; then
          dotnet test -c Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude=$NETHERMIND_TEST_PROJECTS src/Nethermind/Nethermind.Store.Test;
        else 
          dotnet test -c Release src/Nethermind/Nethermind.Store.Test;
        fi
      name: "Nethermind.Store.Test"
    - script: 
      - git submodule update --init src/Dirichlet
      - if [ $TRAVIS_PULL_REQUEST != false ] || [ $TRAVIS_BRANCH == "master" ]; then
          dotnet test -c Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude=$NETHERMIND_TEST_PROJECTS src/Nethermind/Nethermind.Wallet.Test;
        else 
          dotnet test -c Release src/Nethermind/Nethermind.Wallet.Test;
        fi
      name: "Nethermind.Wallet.Test"
    - script:
      - git submodule update --init src/Dirichlet src/rocksdb-sharp
      - if [ $TRAVIS_PULL_REQUEST != false ] || [ $TRAVIS_BRANCH == "master" ]; then
          dotnet test -c Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude=$NETHERMIND_TEST_PROJECTS src/Nethermind/Nethermind.DataMarketplace.Test;
        else 
          dotnet test -c Release src/Nethermind/Nethermind.DataMarketplace.Test;
        fi
      name: "Nethermind.DataMarketplace.Test"
    - script:
      - git submodule update --init src/Dirichlet src/rocksdb-sharp
      - if [ $TRAVIS_PULL_REQUEST != false ] || [ $TRAVIS_BRANCH == "master" ]; then
          dotnet test -c Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude=$NETHERMIND_TEST_PROJECTS src/Nethermind/Nethermind.DataMarketplace.Consumers.Test;
        else 
          dotnet test -c Release src/Nethermind/Nethermind.DataMarketplace.Consumers.Test;
        fi
      name: "Nethermind.DataMarketplace.Consumers.Test"
    - stage: Ethereum Tests
      if: branch = master OR type = pull_request
      script:
      - git -c submodule."src/eth2.0-spec-tests".update=none submodule update --init && dotnet test -c Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude=$ETHEREUM_TEST_PROJECTS src/Nethermind/Ethereum.Basic.Test
      if: branch = master OR type = pull_request
      name: "Ethereum.Basic.Test"
    - script:
      - git -c submodule."src/eth2.0-spec-tests".update=none submodule update --init && travis_wait 21 dotnet test -c Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude=$ETHEREUM_TEST_PROJECTS src/Nethermind/Ethereum.Blockchain.Block.Test
      if: branch = master OR type = pull_request
      name: "Ethereum.Blockchain.Block.Test"
    - script:
      - git -c submodule."src/eth2.0-spec-tests".update=none submodule update --init && travis_wait 21 dotnet test -c Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude=$ETHEREUM_TEST_PROJECTS src/Nethermind/Ethereum.Blockchain.Test
      if: branch = master OR type = pull_request
      name: "Ethereum.Blockchain.Test"
    - script:
      - git -c submodule."src/eth2.0-spec-tests".update=none submodule update --init && dotnet test -c Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude=$ETHEREUM_TEST_PROJECTS src/Nethermind/Ethereum.Difficulty.Test
      if: branch = master OR type = pull_request
      name: "Ethereum.Difficulty.Test"
    - script:
      - git -c submodule."src/eth2.0-spec-tests".update=none submodule update --init && dotnet test -c Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude=$ETHEREUM_TEST_PROJECTS src/Nethermind/Ethereum.HexPrefix.Test
      if: branch = master OR type = pull_request
      name: "Ethereum.HexPrefix.Test"
    - script:
      - git -c submodule."src/eth2.0-spec-tests".update=none submodule update --init && dotnet test -c Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude=$ETHEREUM_TEST_PROJECTS src/Nethermind/Ethereum.KeyAddress.Test
      if: branch = master OR type = pull_request
      name: "Ethereum.KeyAddress.Test"
    - script:
      - git -c submodule."src/eth2.0-spec-tests".update=none submodule update --init && dotnet test -c Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude=$ETHEREUM_TEST_PROJECTS src/Nethermind/Ethereum.PoW.Test
      if: branch = master OR type = pull_request
      name: "Ethereum.PoW.Test"
    - script:
      - git -c submodule."src/eth2.0-spec-tests".update=none submodule update --init && dotnet test -c Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude=$ETHEREUM_TEST_PROJECTS src/Nethermind/Ethereum.Rlp.Test
      if: branch = master OR type = pull_request
      name: "Ethereum.Rlp.Test"
    - script:
      - git -c submodule."src/eth2.0-spec-tests".update=none submodule update --init && dotnet test -c Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude=$ETHEREUM_TEST_PROJECTS src/Nethermind/Ethereum.Transaction.Test
      if: branch = master OR type = pull_request
      name: "Ethereum.Transaction.Test"
    - script:
      - git -c submodule."src/eth2.0-spec-tests".update=none submodule update --init && dotnet test -c Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude=$ETHEREUM_TEST_PROJECTS src/Nethermind/Ethereum.Transition.Test
      if: branch = master OR type = pull_request
      name: "Ethereum.Transition.Test"
    - script:
      - git -c submodule."src/eth2.0-spec-tests".update=none submodule update --init && dotnet test -c Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude=$ETHEREUM_TEST_PROJECTS src/Nethermind/Ethereum.Trie.Test
      #- ./scripts/docker-publish.sh
      if: branch = master OR type = pull_request
      name: "Ethereum.Trie.Test"
      #- stage: Ethereum 2 Tests
      #if: branch = master OR type = pull_request
      #script:
      #- git -c submodule."src/tests".update=none submodule update --init && dotnet test -c Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude=$ETHEREUM_TEST_PROJECTS src/Nethermind/Ethereum2.Bls.Test
      #if: branch = master OR type = pull_request
      #name: "Ethereum2.Bls.Test"
      #- script:
      #- git -c submodule."src/tests".update=none submodule update --init && dotnet test -c Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude=$ETHEREUM_TEST_PROJECTS src/Nethermind/Ethereum2.Ssz.Test
      #if: branch = master OR type = pull_request
      #name: "Ethereum2.Ssz.Test"
