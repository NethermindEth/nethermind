# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Demerzel Solutions Limited
# This file is distributed under the same license as the nethermind package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: nethermind \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-14 17:16+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../source/enterprise.rst:2
msgid "Enterprise"
msgstr ""

#: ../../source/enterprise.rst:4
msgid ""
"Nethermind supports clients through monitoring their Ethereum Nodes with "
"a nice and handy tools such as ``Grafana`` or ``Seq``."
msgstr ""

#: ../../source/enterprise.rst:7
msgid "Seq"
msgstr ""

#: ../../source/enterprise.rst:9
msgid ""
"With `Seq <https://datalust.co/seq>`_  you can quickly identify and "
"diagnose problems with your Nethermind nodes. You can setup dashboards to"
" monitor node's behaviour and also send alerts whenever critical errors "
"occur. With the help of NLog logging the application logs are being sent "
"over to a Seq instance to enable monitoring. You can easily search "
"through the events by simply writing SQL queries."
msgstr ""

#: ../../source/enterprise.rst:11
msgid ""
"Clients can entrust monitoring and support of the nodes to us or "
"configure their own dashboard and Seq tools. Nethermind team can use Seq "
"dashboards and alerts to quickly address any production issues and "
"outages."
msgstr ""

#: ../../source/enterprise.rst:14
msgid "Dashboards and Alerts"
msgstr ""

#: ../../source/enterprise.rst:16
msgid ""
"In Seq we are able to visualize events data with simple charts. They're "
"very useful when it comes to alert the Team when something wrong happens "
"with nodes."
msgstr ""

#: ../../source/enterprise.rst:20
msgid ""
"The Alert is set up to trigger when the Validator node stops sealing "
"blocks in a specified measurement window."
msgstr ""

#: ../../source/enterprise.rst:24
msgid ""
"The Alert is being sent to our `OpsGenie "
"<https://www.atlassian.com/software/opsgenie>`_ instance over the SMTP "
"server configured via one of the Apps which are plug-ins that process "
"events and alerts, or ingest events from an external source. There are "
"many of them created and provided by the community. In our example we use"
" an ``Email+`` 2.0.92 provided by Datalust and Contributors."
msgstr ""

#: ../../source/enterprise.rst:29
msgid ""
"When the alert reaches the OpsGenie, phone notfications are being sent to"
" our on-call Teams."
msgstr ""

#: ../../source/enterprise.rst:33
msgid ""
"We can also view them in a nice HTML format which can be also configured "
"in Seq."
msgstr ""

#: ../../source/enterprise.rst:38
msgid "Logs"
msgstr ""

#: ../../source/enterprise.rst:40
msgid ""
"With the power of structured logging we can quickly check the source of "
"an event. It's useful when diagnosing problems with Ethereum nodes, we "
"can verify the source of an error in a second. It is very easy to create "
"some handy filters and queries which can be reused."
msgstr ""

#: ../../source/enterprise.rst:46
msgid "SQL queries"
msgstr ""

#: ../../source/enterprise.rst:48
msgid ""
"The most popular database query language can be used to query over "
"application logs."
msgstr ""

